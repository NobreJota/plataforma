

<style>
  .CidadeBairro{
    width: 70%;height: 3.2vh;margin: auto;
    margin-left: 6px;margin-top: -15px;
    background-color: #ffffff;
    color: #4e4d4d;
    text-align: center;
  }

  .modal-body .list-group-item {
  padding: 0.75rem 0.5rem;
  transition: background-color 0.2s;
}

.modal-body .list-group-item:hover {
  background-color: #f8f9fa;
}

.btn-sm {
  padding: 2px 8px;
  font-size: 0.8rem;
}

.alinhar-direita {
  text-align: right;
}

.alinhar-center {
  text-align:center;
}

.edit-row {
  background-color: #fff3cd !important; /* amarelo claro */
  border-left: 4px solid #ffc107;
}

.delete-row {
  background-color: #f8d7da !important; /* vermelho claro */
  border-left: 4px solid #dc3545;
}
</style>
<style>
.resultado-similar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  margin-bottom: 6px;
  background-color: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 6px;
  font-size: 0.9rem;
  box-shadow: 1px 1px 3px rgba(0,0,0,0.05);
}

.resultado-similar:hover {
  background-color: #e9ecef;
}

.resultado-similar span {
  flex: 1;
  margin-right: 10px;
  color: #212529;
}

.resultado-similar button {
  padding: 4px 10px;
  background-color: #198754;
  border: none;
  border-radius: 4px;
  color: white;
  cursor: pointer;
  font-size: 0.8rem;
  transition: background-color 0.2s ease;
}

.resultado-similar button:hover {
  background-color: #146c43;
}

</style>
<style>
  .foto-box{
    width: 120px;
    height: 170px;
    display:flex; flex-direction: column;
    align-items:center; justify-content:center;
    background:#ed09e5;
    border: 1px solid #cfd3d7;
    border-radius: 10px;
    padding: 6px;
    box-shadow: 0 2px 6px rgba(0,0,0,.15);
    aspect-ratio: 1 / 1;     /* quadradinho perfeito */
    overflow: hidden;
  }


.fotos-wrapper{
  min-height: 150px;            /* agora visível */
  background: #094b2f;          /* seu verde escuro */
  border-radius: 6px;
  padding: 10px;
  display: flex;
  flex-wrap: wrap;        /* <- importante p/ notebook */
  gap: 10px;
  align-content: flex-start;
}

.foto-box img{
  width: 100px; height: 100px;
  object-fit: contain;
  border:transparent; cursor: pointer;
  background-color: #fff;
  padding: 8px;
  border-radius: 8px;
  /* observar */
  max-width: 100%;
  max-height: 100%;
}

#select_departamento {
  background-color: #04bb32;
  color: white;
  font-weight: bold;
  border-radius: 4px;
  padding: 5px;
}
</style>
{{!-- *modal vinculo  */ --}}
<style>

.modal-dialog {
  max-height: 90vh;
  margin-top: 2vh;
}

.option-roxa{
   background-color: #2b0a26;
   color:#ffffff;
}

.openModal{
    display:none;
    position:fixed;
    top:0; left:0;
    width:100%; height:100%;
    background:#00000080;
    justify-content:center;
    align-items:flex-start;   /* cola no topo em notebook */
    padding-top:30px;         /* respiro no topo */
    z-index:9999;
  }

  #botaoGravar{
    width: 90%;
    height: 40px;
  }
</style>
<style>
  /* empilhar cabeçalhos no notebook */
  @media (max-width: 1366px){    }
</style>
{{!-- ///////////////////////////////////////////////////////////////////////////////////////////// --}}
<style>
#modalImagem.backdrop {
position: fixed;
inset: 0;
background: rgba(0,0,0,.55);
display: none; /* controlado por .show */
z-index: 1500;
}
#modalImagem.backdrop.show { display: block; }


#modalImagem .mi-dialog {
    position: absolute;
    right: 2vw; /* encostado à direita, como o usuário costuma preferir */
    top: 4vh;
    width: min(96vw, 1180px);
    height: 92vh;
    background: #f10505;
    color: #fff;
    border-radius: 16px;
    box-shadow: 0 12px 40px rgba(0,0,0,.6);
    overflow: hidden; /* barra interna por seção */
    display: flex;
    flex-direction: column;
}


/* ====== Cabeçalho (A) ====== */
.mi-header {
background: #8d0037; /* vinho */
padding: 14px 18px 10px;
display: grid;
grid-template-columns: auto 1fr auto;
gap: 12px;
align-items: center;
border-bottom: 2px solid #330018;
}
.mi-title {
font-size: 20px;
font-weight: 700;
letter-spacing: .3px;
white-space: nowrap;
}
.mi-actions { display: flex; gap: 10px; align-items: center; }
.mi-btn {
border: 0; outline: 0; cursor: pointer;
padding: 8px 12px; border-radius: 10px;
background: #1976d2; color: #fff; font-weight: 600;
}
.mi-btn:hover { filter: brightness(1.05); }
.mi-btn.flat { background: #3949ab; }
.mi-btn.danger { background: #b71c1c; }
.mi-close {
background: #111; color: #fff; border: 1px solid #333; border-radius: 12px;
font-weight: 800; width: 36px; height: 36px; display: grid; place-items: center; cursor: pointer;
}
.mi-close:hover { background: #222; }


/* ====== Linha de Informações (B) ====== */
.mi-info {
background: #19a204; /* verde vivo */
padding: 10px 12px;
border-bottom: 2px solid #0c5102;
}
.mi-grid {
display: grid;
grid-template-columns: 1.1fr 1.6fr 1.4fr 1.1fr;
gap: 10px;
}
.mi-field { display: grid; gap: 4px; font-size: 12px; color: #122; }
.mi-field label { font-weight: 700; color: #032d02; }
.mi-field input {
height: 34px; border: 0; border-radius: 8px;
padding: 0 10px; outline: none; background: #fff; color: #000;
}
.mi-field input[readonly] { background: #f3f6f9; }


/* ====== Corpo (C + D) ====== */

//.mi-body { flex: 1; display: grid; grid-template-rows: 220px 1fr; }  /* C ≈ 220px, D ocupa o resto */
.mi-body { flex:1; display:grid; grid-template-rows: 220px 1fr; } 

/* ====== Seção C: Slots de fotos ====== */
.mi-slots {
background: #ffe606; /* amarelo */
padding: 14px 14px 8px;
overflow: hidden;

}

.mi-slots-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; }
.mi-slots-title { color: #1a1a1a; font-weight: 800; }
.mi-nobank{
  margin:8px 0 0;
  background:rgba(176,0,32,.12);
  border:1px dashed #b00020;
  color:#2b0008;
  font-weight:800;
  padding:8px 10px;
  border-radius:10px;
}
.mi-slot-grid {
   display: grid; grid-template-columns: repeat(7, minmax(120px,1fr));
   gap: 12px; align-items: stretch;
}
.mi-slot {
background: #ffffff; /* magenta */
border-radius: 14px; position: relative; overflow: hidden; cursor: pointer;
display: grid; place-items: center; min-height: 150px; border: 4px solid #ffe606;color:#0b100f;
}

.mi-slot::before{
  content: attr(data-num);
  position: absolute; top: 6px; left: 10px;
  font-weight: 900; font-size: 18px;
  color: #8d0037; text-shadow: 0 1px 0 #fff;
}

.mi-slot img { width: 100%; height: 100%; object-fit: cover; display: block; }

.mi-slot.empty::after {
   content: "Clique aqui para pegar a foto no computador";
   color: #9c0808; font-weight: 400; text-align: center; padding: 10px; line-height: 1.1;
}
.mi-slot .mi-remove {
    position: absolute; top: 6px; right: 6px; width: 26px; height: 26px; border-radius: 50%;
    display: none; place-items: center; background: rgba(0,0,0,.65); color: #fff; font-size: 14px; cursor: pointer;
}
.mi-slot.filled .mi-remove { display: grid; }


/* ====== Barra de ações (slots) ====== */
.mi-toolbar { display: flex; gap: 10px; }


/* ====== Seção D: Banco de Imagens ====== */
.mi-bank {
      background: #7da56b; /* verde musgo claro do mock */
      border-top: 6px solid #8d0037; /* contorno vinho */
      padding: 10px 12px 12px;
      overflow: auto;
}
.mi-bank-title { font-weight: 800; color: #1b000a; margin-bottom: 8px; }
.mi-bank-grid { display: grid; grid-template-columns: repeat(12, 1fr); gap: 10px; }
.mi-thumb {
    aspect-ratio: 1/1; background: #f2f2f2; border-radius: 10px; overflow: hidden; border: 3px solid #7b002e; cursor: pointer;
    display: grid; place-items: center;
}
.mi-thumb img { width: 100%; height: 100%; object-fit: cover; display: block; }
.mi-empty-msg { opacity: .85; font-weight: 600; }


/* ====== Rodapé (gravar) ====== */
.mi-footer {
padding: 10px 12px; background: #0b100f; border-top: 1px solid #0f1a19; display: flex; justify-content: flex-end; gap: 10px;
}
</style>

<script>
  window.todosSetoresSecoes = {{{todosSetoresSecoes}}}
</script>
<div id="menuLateral" class="lateral">
  <div id="menulista" style="width: 10vw; height: 92vh; background-color:#fff; display: flex; flex-direction: column; justify-content: space-around; transition: margin-left 0.4s ease;">
    <!-- Conteúdo do menu -->
    <div style="height: 25vh;background-color:#fff;"></div>
    <div style="display: flex; flex-direction: column; justify-content: space-around;background-color:transparent;text-align: left;margin: auto;">
      <a id="passa-cadastrofornec" href="">Cadastro fornecedor</a>
      <div style="height: 1vh;"></div>
      <div>
      <a id="passa-listafornec" href="/fornec/listafornec/:{{this._id}}">Lista fornecedor</a>
      </div>
    </div>
    <div style="height: 25vh;"></div>
  </div>

  <div id="faixaVertical" style="width: 2vw; height: 92.5vh; background-color: #295ee4; display: flex; flex-direction: column; justify-content: space-around; z-index: 800;">
    <h2 id="H2menuLateral" style="font-size: 1vw; text-align: end; color: #fff;">Menu lateral</h2>
  </div>
</div>  
<div id="modalInfoSetorSecao" style="display:none; position:absolute; z-index:500;
     background:#fff; border:1px solid #ccc; padding:10px; border-radius:6px;
     box-shadow: 0 0 8px rgba(0,0,0,0.2); max-width: 250px; font-size: 14px;">
  <div id="modalContentSetorSecao"></div>
</div> 
<div id="painelLista" class="grade" >
        <div style="display: flex;flex-direction: row;justify-content: center;">
           <h1 style="font-weight:200;font-size:medium ;color: red;">Relação de produtos</h1>
        </div>
        <div id="CadastrarProduto" style="width: 98vw;height: 3vh;margin: auto;display: flex;flex-direction: row;justify-content: center;background-color: #295ee4;">
          <button id="abrirModalProduto" style="border: none;background-color: transparent;" data-bs-toggle="modal" data-bs-target="#CadastrarProdutosModal" data-lojista="{{lojista._id}}" class="btn btn-sm" onclick="openCadastroModal()">
            <h1 style="font-weight:200;color:#fff;font-size: small;">Cadastro de produtos</h1>
            {{!-- <input id="lojaFornec" type="text" style="display:block;" value="{{loja._id}}"> --}}
          </button>
        </div>
        <div id="divTable" style="overflow-x: auto;width:100%;">
          <table id="tabelaProdutos" class="table  table-bordered">
            
            <thead style="color: #df061f;">
              <tr >
                <th style="width: 1vw;" onclick="ordenarTabela(0)">Itens</th>
                <th style="display: none;" >Id</th>
                <th onclick="ordenarTabela(2)">Código</th>
                <th onclick="ordenarTabela(3)">Descrição</th>
                <th onclick="ordenarTabela(4)">Complemento</th>
                <th onclick="ordenarTabela(5)">Refer</th>
                <th onclick="ordenarTabela(6)">Fornecedor</th>
                <th onclick="ordenarTabela(7)">Segmento</th>
                {{!-- <th onclick="ordenarTabela(7)">Setor</th>
                <th onclick="ordenarTabela(7)">Seção</th> --}}
                <th onclick="ordenarTabela(8)">Qte</th>
                <th onclick="ordenarTabela(9)">Custo</th>
                <th onclick="ordenarTabela(10)">Vista</th>
                <th onclick="ordenarTabela(11)">Prazo</th>
                <th >Ações</th>
              </tr>
            </thead>
            <tbody id="produtoTable">
              {{#each produtos}}
              <tr data-id="{{_id}}">
                <td class="alinhar-center">{{inc @index}}</td>
                <td style="display: none">{{_id}}</td>
                <td>{{codigo}}</td>
                <td>{{descricao}}</td>
                <td>{{complete}}</td>
                <td>{{referencia}}</td>
                <td>{{fornecedor.razao}}</td>
                <td>
                   {{#each localloja}}
                      {{#each departamento}}
                        <span class="departamento-click" data-index="{{@../index}}" style="font-weight: bold;color:red;">
                          {{nomeDepartamento}}
                        </span>
                      {{/each}}
                    {{/each}}
                </td>
                <td class="alinhar-center">{{qte}}</td>
                <td class="alinhar-direita">{{formatarDecimal precocusto}}</td>
                <td class="alinhar-direita">{{formatarDecimal precovista}}</td>
                <td class="alinhar-direita">{{formatarDecimal precoprazo}}</td>
                <td>
                  <div style="display: flex;flex-direction: row;justify-content:space-around;gap: 4px; flex-wrap: wrap;background-color:transparent;">
                    <select 
                            class="form-select form-select-sm" 
                            onchange="executarAcaoComDataset(this)" 
                            data-id="{{_id}}" 
                            data-descricao="{{descricao}}" 
                            data-fornecedor="{{fornecedor.razao}}"
                            data-departamento ="{{localloja.[0].departamento.[0].nomeDepartamento}}">
                      <option value="" selected disabled>⋮</option>
                      <option value="vincular">🔗 Vincular</option>
                      <option value="imagens">🖼️ Imagens</option>
                      <option  value="editar">✏️ Editar</option>
                      <option  value="deletar">🗑️ Deletar</option>
                    </select>
                    {{!-- // data-codigo="{{codigo}}"  --}}
                  </div>
                </td>
              </tr>
              {{/each}}
            </tbody>
          </table>
        </div>  
</div>
<!-- Modal para edição -->
<div id="editModal"
  style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); justify-content:center; align-items:center; z-index:9999;">
  <div
    style="background:#fff; width:50%; height:auto; padding:20px; border-radius:10px; box-shadow:0 5px 10px rgba(0,0,0,0.5);">
    <h4>Editar Produto ??</h4>
    <form id="editForm">
      {{!-- <input type="text" id="editId" value=""> --}}
      <div style="margin-bottom:10px;" >
        <label>Id:</label>
        <label type="text" id="editId" name="editid" class="form-control" style="background-color: rgb(223, 138, 11);color:#121010"></label>
      </div>
      <div style="margin-bottom:10px;" >
        <label>Código:</label>
        <input type="text" id="editCodigo" name="codigo" class="form-control" style="background-color: yellow;color:#110b0b">
      </div>
      <div style="margin-bottom:10px;" >
        <label>Descrição:</label>
        <input type="text" id="editDescricao" name="descricao" class="form-control">
      </div>
       <div style="margin-bottom:10px;" >
        <label>Complemento:</label>
        <input type="text" id="editComplemento" name="complemento" class="form-control">
      </div>
      <div style="margin-bottom:10px;">
        <label>Refer:</label>
        <input type="text" id="editRefer" name="refer" class="form-control">
      </div>
       <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
            <label style="background-color:transparent;width: 85px;padding: 5px;color:#110b0b">Fornecedor:</label>
            <select id="editFornec" name="fornecedor" style="height: 3.2vh;width:70%;margin: auto;margin-left: 6px;margin-top: 3px;">
              <option value="">Selecione:</option>
                {{#each f}}
                   <option value="{{_id}}">{{razao}} - {{marca}}</option>
                {{/each}}
        </select>
        
        {{!-- <input type="text" id="editFornec" name="fornec" class="form-control"> --}}
      </div>
      <div style="margin-bottom:10px;">
        <label>Quantidade:</label>
        <input type="number" id="editQte" name="qte" class="form-control">
      </div>
      <div style="margin-bottom:10px;">
        <label>Preço Custo:</label>
        <input type="number" step="any" id="editPrecoCusto" name="precocusto" class="form-control">
      </div>
      <div style="margin-bottom:10px;">
        <label>Preço Vista:</label>
        <input type="number" step="any" id="editPrecoVista" name="precovista" class="form-control">
      </div>
      <div style="margin-bottom:10px;">
        <label>Preço Prazo:</label>
        <input type="number" step="any" id="editPrecoPrazo" name="precoprazo" class="form-control">
      </div>
      <button type="button" class="btn btn-secondary" onclick="closeEditModal()">Cancelar</button>
      <button type="submit" class="btn btn-primary">Salvar</button>
    </form>
  </div>
</div>
<!-- Modal para cadastro -->
<div   id="cadastroProdutoModal" class="openModal">
  <div
    style="background:#959292; width:50%; height:97vh; padding:20px; border-radius:10px; box-shadow:0 5px 10px #00000080;position: relative;margin: auto;">
    <button type="button" id="fecharForm" style="position: absolute;top: 5px;right: 5px;border: none;background: transparent;font-size: 30px;cursor: pointer;" onclick="closeCadastroModal()">&times;</button>
    <div style="width: 98%;height: 92vh;margin: auto;background-color: #0b2f83;overflow: scroll;margin-top: 2.5vh;padding: 5px;">
    <h4 style="font-weight: 200;color: #ffffff;">Cadastro de produto</h4>
          <form id="cadastroProdutoForm" style="background-color: #295ee4;color:#fff;position: relative;height: 96vh;" >
            <input id="IddoLojista" type="text" name="loja_id" value="{{lojista._id}}" style="background-color: #df061f;display:block;">
             <div style="margin-bottom:10px;display: block;">
              <label style="color:white">Marca loja:</label>
              <input id="cadastroMarca" type="text"  name="marca" class="form-control" style="background-color: yellow;" >{{lojista.marca}}</input>
            </div>
            <div style="margin-bottom:10px;background-color blueviolet;">
              <label>Código:</label>
              <input id="cadastroCodigo" type="text"  name="codigo" class="form-control" tabindex="0">
            </div>
           
            <div style="margin-bottom:10px;">
              <label>Descrição:</label>
              <input id="cadastroDescricao" type="text"  name="descricao" class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Complemento:</label>
              <input id="cadastroComplemento" type="text"  name="complemento" class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Referência:</label>
              <input id="cadastroReferencia" type="text"  name="referencia" class="form-control">
            </div>
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
              <label style="background-color: #df061f;width: 85px;padding: 5px;">Fornecedor:</label>
              <select id="selectFornecedores" name="fornecedores" style="height: 3.2vh;width:70%;margin: auto;margin-left: 6px;margin-top: 3px;">
                       <option value="">Selecione:</option>
                          {{#each f}}
                            <option value="{{_id}}">{{marca}}</option>
                          {{/each}}
              </select>
            </div>
            {{!-- Os nomes cidade e bairro constam  na ficha do produto para facilitar a consulta --}}
            <div style="background-color:transparent;margin-bottom: 12px;margin-top: 6px;display: none;">
              <label id="cadastroCidade" style="background-color: #df061f;width: 85px;padding: 5px;">Cidade:</label>
              <label id="cadastroBairro" class="CidadeBairro" style="margin-top: -6px;padding-top: 0px;">{{lojista.cidade}}</label>
            </div>
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;display: none;">
              <label style="background-color: #df061f;width: 85px;padding: 5px;">Bairro:</label>
              <label class="CidadeBairro">{{lojista.bairro}}</label>
            </div>
            <div style="margin-bottom:10px;">
              <label>Quantidade:</label>
              <input id="cadastroQte" type="number"  name="qte" class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Preço Custo:</label>
              <input id="cadastroPrecoCusto" type="number" name="precocusto" step="0.01" min="0" lang="pt-BR"   class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Preço Vista:</label>
              <input id="cadastroPrecoVista" type="number" name="precovista" step="0.01" min="0" lang="pt-BR"   class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Preço Prazo:</label>
              <input id="cadastroPrecoPrazo" type="number" name="precoprazo" step="0.01" min="0" lang="pt-BR"   class="form-control">
            </div>
            {{!-- ========================================================================== --}}
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
                <label style="background-color: #df061f;width: 150px;padding: 5px;">Departamento:</label>
                <select id="select_departamento" name="select_departamento" style="height: 3.2vh; width: 70%; margin-left: 6px; margin-top: 3px;">
                      <option value="" style="background-color: #295ee4;color:#fff">Selecione o departamento:</option>
                </select>
            </div>
            {{!-- ========================================================================== --}}
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
                <label for="setor" style="background-color: #df061f;width: 150px;padding: 5px;">Setor:</label>
                
                <select id="selectSetor" name="setor" style="height: 3.2vh; width: 70%; margin-left: 6px; margin-top: 3px;">
                      <option value="" style="color:black">Selecione o setor:</option>
                </select>
             
            </div>
            {{!-- ========================================================================== --}}
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
              <label for="divSelect" style="background-color: #df061f;width: 150px;padding: 5px;">Seção:</label>
              {{!-- <div id="divSelect" style=""> --}}
                <select id="selectSecao" name="secao" style="height: 3.2vh; width: 70%; margin-left: 6px; margin-top: 3px;">
                      <option value="" style="color:black">Selecione a seção:</option>
                </select>
              {{!-- </div> --}}
            </div>
            {{!-- ========================================================================== --}}
            <div style="display: flex;flex-direction: row;justify-content:space-around;justify-items: center;padding: o 10px 0 10px;margin-bottom: 10px;">
                <button type="button" class="btn btn-secondary" onclick="closeCadastroModal()">Cancelar</button>
                <button id="btnSalvar" type="submit" class="btn btn-primary">Salvar</button>
            </div>
          </form>
    </div>
  </div>
</div>
<!-- Modal Produto -->
<div id="modalProdutoVinculo" class="modal fade"  tabindex="-1">
   <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Produto ?</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="conteudoModalProduto">
        <!-- Conteúdo preenchido dinamicamente via JS -->
      </div>
      <div class="modal-footer">
        <button class="btn btn-primary btn-sm" style="background-color:#02662d;color:#ffffff" onclick="abrirModalBuscaSimilar('{{_id}}')">+ vincular</button>
      </div>
    </div>
  </div>
</div>
{{!-- Busca Similares --}}
<div id="areaBuscaSimilar" style="display:none; padding: 10px;">
  <h6>Buscar Similar para Vincular</h6>
  <input type="text" id="buscaSimilarInput1" placeholder="Buscar similar por código ou nome" class="form-control" onkeyup="buscarSimilares(baseId)">
  <div id="resultadosSimilar1" style="margin-top:10px;"></div>
</div>
<!-- SEGUNDO BLOCO -->
<div id="modalVinculo" class="modal fade"  tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Buscar Similar para Vincular</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <input id="buscaSimilarInput2" type="text" class="form-control" style="background-color: #ffffff;color: #100e0e;" placeholder="Buscar similar por código ou nome" oninput="buscarSimilar()">
        <div id="resultadosSimilar2" class="mt-3"></div>
      </div>
    </div>
  </div>
</div>
<!-- MODAL Upload de Imagens -->
<div id="modalImagem" class="backdrop" role="dialog" aria-modal="true" aria-hidden="true">
      <div class="mi-dialog">
            <!-- A: Cabeçalho -->
            <div class="mi-header">
                <button id="miClose" class="mi-close" title="Fechar">×</button>
                <div class="mi-title">Tratando da imagem</div>
                <div class="mi-actions">
                <button id="miReloadBank" class="mi-btn flat" title="Recarregar banco de imagens">Recarregar Bco IMG</button>
                </div>
            </div>
            <!-- B: Linha de informações do produto -->
            <div class="mi-info">
                <div class="mi-grid">
                    <div class="mi-field">
                      <label>id-produto</label>
                      <input id="miProdId" type="text" readonly>
                    </div>
                    <div class="mi-field">
                      <label>descrição</label>
                      <input id="miDescricao" type="text" readonly>
                    </div>
                    <div class="mi-field">
                      <label>fornecedor</label>
                      <input id="miFornecedor" type="text" readonly>
                    </div>
                    <div class="mi-field">
                      <label>departamento</label>
                      <input id="miDepartamento" type="text" readonly>
                    </div>
                </div>
            </div>
            <!-- Corpo: C (slots) + D (banco) -->
            <div class="mi-body">
                <!-- C: Slots de fotos -->
                <section class="mi-slots">
                  <div class="mi-slots-header">
                        <div class="mi-slots-title">Seleção e Gravar Imagens</div>
                        <div class="mi-toolbar">
                          <button id="miClearAll" class="mi-btn danger">Limpar seleção</button>
                        </div>
                  </div>
                  <div id="miSlotGrid" class="mi-slot-grid" style="background:trasnsparente ;"></div>
                  <div id="miNoBankBanner" class="mi-nobank" style="display:none">
                          Não há imagens no banco. Clique nas caixas acima para escolher do seu computador.
                  </div>
                  
                </section>
                <!-- D: Banco de imagens -->
                <section class="mi-bank">
                    <div class="mi-bank-title">banco de imagens</div>
                    <div id="imgbcoImg" name="imgbcoImg" class="mi-bank-grid"></div>
                    <div id="miBankEmpty" class="mi-empty-msg" style="display:none">
                        Não há imagens.
                    </div>
                </section>
            </div>
            <div class="mi-footer">
                <button id="btnGravarImagens" class="mi-btn">Gravar imagens</button>
            </div>
      </div>
</div>
<input id="miHiddenFile" type="file" accept="image/*" style="display:none" />

{{!-- <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> --}}
{{!-- MOSTRANDO E ESCONDENDO MENU LATERAL --}}
<script>
      const faixa = document.getElementById("faixaVertical");
      const menulista = document.getElementById("menulista");

      faixa.addEventListener("click", function () {
        const currentMargin = parseFloat(window.getComputedStyle(menulista).marginLeft);
        const vwToPx = vw => (vw * window.innerWidth) / 100;

        const abertoPX = 0;
        const fechadoPX = -vwToPx(10); // Agora -13vw

        if (Math.abs(currentMargin - fechadoPX) <= 1) {
          menulista.style.marginLeft = '0vw'; // Abre
        } else {
          menulista.style.marginLeft = '-10vw'; // Fecha
        }
      });
</script>
{{!-- PEGA ID LOJISTA PARA LINK FORNEC CADASTRO --}}
<script>
  function pegaIdlojista(){
    //console.log(' [ 377 pegaIdlojista]')
    let n=document.getElementById("IddoLojista");
    const link = document.getElementById("passa-cadastrofornec");
    // Atualiza o href corretamente:
    let lojistaId=n.value;
    link.href = `/fornec/cadastro/${lojistaId}`;
     const link1 = document.getElementById("passa-listafornec");
    // Atualiza o href corretamente:
    link1.href = `/fornec/listafornec/${lojistaId}`;
  }

   pegaIdlojista()
</script>
{{!-- ORDENAÇÃO DE COLUNS --}}
<script>
let direcaoOrdenacao = [];

function ordenarTabela(colunaIndex) {
  const tabela = document.getElementById("tabelaProdutos");
  const tbody = tabela.tBodies[0];
  const linhas = Array.from(tbody.rows);

  // Alternar direção
  direcaoOrdenacao[colunaIndex] = !direcaoOrdenacao[colunaIndex];
  const crescente = direcaoOrdenacao[colunaIndex];

  linhas.sort((a, b) => {
    const valA = a.cells[colunaIndex].innerText.trim();
    const valB = b.cells[colunaIndex].innerText.trim();

    const numA = parseFloat(valA.replace(",", "."));
    const numB = parseFloat(valB.replace(",", "."));
    const ambosNumeros = !isNaN(numA) && !isNaN(numB);

    if (ambosNumeros) {
      return crescente ? numA - numB : numB - numA;
    } else {
      return crescente
        ? valA.localeCompare(valB)
        : valB.localeCompare(valA);
    }
  });

  linhas.forEach(row => tbody.appendChild(row));
}
</script>
{{!-- buscaSimilarInput2 --}}
<script>
window.addEventListener("DOMContentLoaded", () => {
  const inputBuscar = document.getElementById("buscaSimilarInput2");

  if (!inputBuscar) return;

  inputBuscar.addEventListener("input", async (e) => {
    console.log(' [ 617 produtos .handlebars]')
    const termo = e.target.value.trim();
    if (termo.length < 2 || !produtoIdBaseSelecionado) return;

    try {
      const resposta = await fetch(`/simiproduto/buscar?termo=${encodeURIComponent(termo)}&baseId=${produtoIdBaseSelecionado}`);
      const similares = await resposta.json();

      const lista = document.getElementById("resultadosSimilar2");
      lista.innerHTML = "";

      if (!similares.length) {
        lista.innerHTML = '<div class="text-muted">Nenhum resultado encontrado</div>';
        return;
      }

      similares.forEach(sim => {
        const li = document.createElement("li");
        li.className = "list-group-item d-flex justify-content-between align-items-center";
        li.innerHTML = `
          <div>
            <strong>${sim.codigo}</strong> - ${sim.descricao} (R$ ${parseFloat(sim.precovista?.$numberDecimal || '0').toFixed(2)})
          </div>
          <button class="btn btn-sm btn-success" onclick="vincularSimilar('${produtoIdBaseSelecionado}', '${sim._id}')">Vincular</button>
        `;
        lista.appendChild(li);
      });
    } catch (err) {
      console.error("Erro na busca de similares:", err);
    }
  });
});
</script>
{{!-- executarAcao(acao, id, codigo, descricao,fornecedor) --}}
<script>
  function executarAcao(acao, id, descricao,fornecedor,departamento) {
        const row = document.querySelector(`[data-id='${id}']`);
        const tableRows = document.querySelectorAll("tr");

        // limpa os destaques anteriores
        tableRows.forEach(r => r.classList.remove("edit-row", "delete-row"));
        console.log('');
     //   console.log(' [ 765 ] -Id => ',id,' descricao =>  ',descricao,' fornecedor=>   ',fornecedor,' departamento =>  ', departamento)
     //   console.log('------------------------------------------------------');
     //   console.log('');
        const produtoId=id;
        const departamentoNome=departamento;
        switch (acao) {
          case "vincular":
            console.log(' [ 479 ] executarAcao',id)
            abrirModalVinculoProduto(id);
            break;
          case "imagens":
             window.abrirModalImagem({
                produtoId,
                descricao,
                fornecedor,
                departamento: departamentoNome
              });
              break;
          case "editar":
            row?.classList.add("edit-row");
            openEditModal(id);
            break;
          case "deletar":
            row?.classList.add("delete-row");
            deleteProduct(id);
            break;
        }
  }

  //abrirModalImagens para selecionar a imaagem a ser gravada
  function abrirModalImagens(descricao, fornecedor, { produtoId, departamentoNome }) {
        window.abrirModalImagem({
          produtoId,
          descricao,
          fornecedor,
          departamento: departamentoNome
        });
  }
</script>
{{!-- criardivsfotos --}}
<script>
  function criardivsfotos() {
    acertou();
  }

  function acertou() {
  //const qte = parseInt(document.getElementById("qteFotos").value || "0", 10);
  //const container = document.getElementById("fotosContainer");
  //container.innerHTML = "";

  //for (let i = 0; i < qte; i++) {
  //  const box = document.createElement("div");
  //  box.className = "foto-box";

  //  const img = document.createElement("img");
  //  img.src = "/images/revistalogo.png";

  //  const input = document.createElement("input");
  //  input.type = "file";
  //  input.id = `uploadImg${i}`;
  //  input.accept = "image/*";
  //  input.style.display = "none";

  //  img.addEventListener("click", () => input.click());
  //  input.addEventListener("change", () => {
  //    if (input.files[0]) img.src = URL.createObjectURL(input.files[0]);
  //  });

  //  box.appendChild(img);
  //  box.appendChild(input);
  //  container.appendChild(box);
  }

  // Garante um ÚNICO listener no botão
  //const btn = document.getElementById("botaoGravar");
  //btn.onclick = async () => {
  // const codigoId     = document.getElementById("codigoimg").value;
  // const produtoNome  = document.getElementById("descricaoimg").value;
  //  const fornecedor   = document.getElementById("fornecimg").value;
  //  const departamento = document.getElementById("deptoimg").value;

  //  const MAX_MB = 2;
  //  const inputs = container.querySelectorAll('input[type="file"]');
  //  let enviados = 0;

  //  for (let i = 0; i < inputs.length; i++) {
  //    const input = inputs[i];
  //    const file = input.files?.[0];
  //    if (!file) continue;

  //    if (file.size > MAX_MB * 1024 * 1024) {
  //      alert(`Arquivo ${i + 1} excede ${MAX_MB} MB. Pulei este.`);
  //      continue;
  //    }

  //    const ordem = String(i + 1).padStart(2, "0");
  //    const qs = new URLSearchParams({
  //      filename: file.name,
  // /     filetype: file.type,
  //      ordem
   //   });

 //     const r = await fetch(`/gravafoto/getpresignedurl?${qs.toString()}`);
 //     const { uploadUrl, key } = await r.json();

 //     const up = await fetch(uploadUrl, {
 //       method: "PUT",
 //      body: file,
 //       headers: { "Content-Type": file.type, "x-amz-acl": "public-read" }
 //     });
 //     if (!up.ok) { alert(`Falha ao enviar a imagem ${i + 1}.`); continue; }

 //     const publicUrl = uploadUrl.split("?")[0];
 //     await fetch("/gravafoto/imagem/salvar", {
 //       method: "POST",
 //       headers: { "Content-Type": "application/json" },
 //       body: JSON.stringify({
 //         codigoId,
 //         produtoNome,
 //         fornecedor,
 //         departamento,
 //         imagemUrl: publicUrl,
 // /        shortkey: String(key || "").substring(0,16),
 //         mimeType: file.type,
 //         size: file.size
 //       })
 //     });
 //     enviados++;
 //   }

 //   alert(enviados > 0 ? `${enviados} imagem(ns) enviada(s) com sucesso.` : "Nenhuma imagem selecionada.");

    // mantenho aberto (útil pra enviar mais); feche se quiser:
 //    fecharModalUpload();
 // };
//}
</script>


{{!-- openCadastroModal --}}
<script>
  function openCadastroModal(){
      document.getElementById("cadastroProdutoModal").style.display="block";
  }  
</script>
{{!-- BUSCAR FORNECEDORES QUANDO O INPUTCODIGO TIVER FOCO --}}
<script>
  let fornecedoresCarregados = false;

  document.addEventListener("DOMContentLoaded", () => {
    const inputCodigo = document.getElementById("cadastroCodigo");
    let lojistaId=document.getElementById("IddoLojista").value;

    if (inputCodigo) {
      inputCodigo.addEventListener("focus", async () => {
        if (!fornecedoresCarregados) {
          try {
            const response = await fetch(`/fornec/fornecqlojista/${lojistaId}`);
            const lista = await response.json();
            console.log('[ 912 ]');
            console.log('',lista);
            console.log('');
            const select = document.getElementById("selectFornecedores");

            select.innerHTML = '<option disabled selected>Selecione um fornecedor</option>';

            lista.forEach(dep => {
              const opt = document.createElement("option");
              opt.value = dep._id;
              opt.textContent = dep.marca;
              select.appendChild(opt);
            });

            fornecedoresCarregados = true; // para não buscar de novo
          } catch (err) {
            console.error("Erro ao buscar fornecedores:", err);
          }
        }
      });
    }
  });
</script>
 {{!-- BUSCAR OS DEPARTAMENTOS QUANDO O INPUTCODIGO ADQUIRIR FOCO --}}
<script>
  let departamentosCarregados = false;

  document.addEventListener("DOMContentLoaded", () => {
    const inputCodigo = document.getElementById("cadastroDescricao");
    let idLoja=document.getElementById("IddoLojista").value;
    ///////////////////////////////////////////////
    if (inputCodigo) {
      inputCodigo.addEventListener("focus", async () => {
       // console.log("[ 951 ] Focus Código ")
        if (!departamentosCarregados) {
          try {
            console.log('');
            console.log('',idLoja);
            console.log('');
            const response = await fetch(`/produto/lojistadepartamentos/${idLoja}`);
            const departamentos = await response.json();
            console.log(' [ 1089 ]');
            console.log('',departamentos);
            console.log('');
            const select = document.getElementById("select_departamento");

            // Limpa o <select> antes de preencher
           // select.innerHTML = '<option disabled selected>Selecione um departamento</option>';
            select.style.backgroundColor="#100e0e";
            select.style.backgroundColor="red";  
            select.style.color="#100e0e";
            select.style.color="pink";
            // Preenche o select com os dados recebidos
            departamentos.forEach(dep => {
              const opt = document.createElement("option");
              opt.value = dep._id;
              opt.textContent = dep.nomeDepartamento;
              opt.classList.add("option-roxa");
              select.appendChild(opt);
            });

            select.style.backgroundColor="black";
            select.style.color="red";

            departamentosCarregados = true;
          } catch (err) {
            console.error("Erro ao carregar departamentos:", err);
          }
        }
      });
    }
  });
</script>
{{!-- select_departamento + selectSetor --}}
<script>
document.getElementById('select_departamento').addEventListener('change', async function () {
  const departamentoId = this.value;

  const setorSelect = document.getElementById('selectSetor');
  setorSelect.innerHTML = '<option value="">Carregando setores...</option>';

  if (departamentoId) {
    try {
      console.log('-----------------');
      console.log(' [ 995 ]');
      console.log('-----------------');
      const response = await fetch(`/segmento/setores/${departamentoId}`);
      const setores = await response.json();
      console.log(' setores ==>',setores)
      if (Array.isArray(setores)) {
        setorSelect.innerHTML = '<option value="">Selecione o setor:</option>';
        setores.forEach(setor => {
          const opt = document.createElement('option');
          opt.value = setor._id;
          opt.textContent = setor.nomeDeptoSetor;
          opt.classList.add("option-roxa");
          setorSelect.appendChild(opt);

          setorSelect.style.backgroundColor="blue";
          setorSelect.style.color="red";
        });
      } else {
        setorSelect.innerHTML = '<option value="">Nenhum setor encontrado.</option>';
      }
    } catch (err) {
      setorSelect.innerHTML = '<option value="">Erro ao buscar setores</option>';
      console.error(err);
    }
  } else {
    setorSelect.innerHTML = '<option value="">Selecione o setor:</option>';
  }
});
document.getElementById('selectSetor').addEventListener('change', async function () {
  const setorId = this.value;
  const setorSecao = document.getElementById('selectSecao');
  setorSecao.innerHTML = '<option value="">Carregando setores...</option>';
  if (setorId) {
    try {
      console.log('-----------------');
      console.log(' [ 1038 ]');
      console.log('-----------------');
      const response = await fetch(`/segmento/secoes/${setorId}`);
      const secoes = await response.json();
      console.log(' seções ==>',secoes)
      if (Array.isArray(secoes)) {
         setorSecao.innerHTML = '<option value="">Selecione o setor:</option>';
         secoes.forEach(secao => {
            const opt = document.createElement('option');
            opt.value = secao._id;
            opt.textContent = secao.nomeSecao;
            opt.classList.add("option-roxa");
            setorSecao.appendChild(opt);

            setorSecao.style.backgroundColor="blue";
            setorSecao.style.color="red";
         });
      } else {
        setorSecao.innerHTML = '<option value="">Nenhum setor encontrado.</option>';
      }
    }catch(e){
      console.log('Error ao carregar a seção!')
    }
  }

})
</script>
{{!-- modalContentSetorSecao --}}
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const spans = document.querySelectorAll(".departamento-click");
    const modal = document.getElementById("modalInfoSetorSecao");
    const modalContent = document.getElementById("modalContentSetorSecao");

    spans.forEach(span => {
      span.addEventListener("click", function (e) {
        const index = parseInt(this.dataset.index);

        // Obtem dados do JS pré-carregado
        const dados = window.todosSetoresSecoes?.[index];
        if (!dados) return;

        let html = "";
        if (dados.setores?.length) {
          html += "<strong>Setores:</strong><ul>";
          dados.setores.forEach(s => html += `<li>${s}</li>`);
          html += "</ul>";
        }

        if (dados.secoes?.length) {
          html += "<strong>Seções:</strong><ul>";
          dados.secoes.forEach(s => html += `<li>${s}</li>`);
          html += "</ul>";
        }

        modalContent.innerHTML = html;

        // Posiciona o modal
        const rect = this.getBoundingClientRect();
        modal.style.left = `${rect.left + window.scrollX}px`;
        modal.style.top = `${rect.top + window.scrollY - modal.offsetHeight - 10}px`;
        modal.style.display = "block";
      });
    });

    // Esconde o modal ao clicar fora
    document.addEventListener("click", function (e) {
      if (!e.target.classList.contains("departamento-click") &&
          !modal.contains(e.target)) {
        modal.style.display = "none";
      }
    });
  });
</script>
{{!-- modalContentSetorSecao --}}
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const spans = document.querySelectorAll(".departamento-click");
    const modal = document.getElementById("modalInfoSetorSecao");
    const modalContent = document.getElementById("modalContentSetorSecao");

    spans.forEach(span => {
      span.addEventListener("click", function (e) {
        const index = parseInt(this.dataset.index);

        // Obtem dados do JS pré-carregado
        const dados = window.todosSetoresSecoes?.[index];
        if (!dados) return;

        let html = "";
        if (dados.setores?.length) {
          html += "<strong>Setores:</strong><ul>";
          dados.setores.forEach(s => html += `<li>${s}</li>`);
          html += "</ul>";
        }

        if (dados.secoes?.length) {
          html += "<strong>Seções:</strong><ul>";
          dados.secoes.forEach(s => html += `<li>${s}</li>`);
          html += "</ul>";
        }

        modalContent.innerHTML = html;

        // Posiciona o modal
        const rect = this.getBoundingClientRect();
        modal.style.left = `${rect.left + window.scrollX}px`;
        modal.style.top = `${rect.top + window.scrollY - modal.offsetHeight - 10}px`;
        modal.style.display = "block";
      });
    });

    // Esconde o modal ao clicar fora
    document.addEventListener("click", function (e) {
      if (!e.target.classList.contains("departamento-click") &&
          !modal.contains(e.target)) {
        modal.style.display = "none";
      }
    });
  });
</script>
<script>
  async function BuscarProdutoImagem(){ return; }
 function renderResultadoProdutoImagem(){ return; }  
  //////////////////////////////   1309    //////////////////////////////////////////////////////
</script>
<script>
  function closeCadastroModal(){
     document.getElementById("cadastroProdutoModal").style.display="none"
  }
</script>
<script>
  // já existem acima no seu arquivo:
  const $miSlotsTitle   = document.querySelector('.mi-slots-title');
  const $miNoBankBanner = document.getElementById('miNoBankBanner');
  const $miBankEmpty    = document.getElementById('miBankEmpty');

(function modalImagemIIFE(){
  /** =================== ESTADO =================== **/
  const MAX_SLOTS = 7;
  const slots = [];                         // { type: 'file'|'bank', file?, url?, key?, origin? }
  const originalSlots = Array(MAX_SLOTS).fill(null); // baseline por índice
  //??????????????????????????????????????
  // === filtro DINÂMICO com base no produto atual ===
let __usarFiltro = true;       // ligado nesta abertura do modal
let __palavrasChave = [];      // palavras extraídas do produto

const normalizar = (s='') =>
  s.normalize('NFD').replace(/\p{Diacritic}/gu,'').toLowerCase();

function extrairPalavrasChave({ descricao = '', fornecedor = '', departamento = '' } = {}) {
  const base = `${descricao} ${fornecedor} ${departamento}`;
  const tokens = normalizar(base)
    .split(/[^a-z0-9]+/)
    .filter(w => w.length >= 4);
  return [...new Set(tokens)].slice(0, 5); // até 5 palavras únicas
}

function configurarFiltroDinamico(ctx) {
  __palavrasChave = extrairPalavrasChave(ctx);
  __usarFiltro = __palavrasChave.length > 0;
}

function pontuacaoDeMatch(texto='') {
  const set = new Set(normalizar(texto).split(/[^a-z0-9]+/));
  return __palavrasChave.filter(p => set.has(p)).length;
}

function ehDoMesmoProdutoDoc(doc = {}) {
  const texto = doc.produtoNome || doc.title || doc.descricao || doc.url || '';
  const score = pontuacaoDeMatch(texto);
  const minimo = Math.min(2, __palavrasChave.length || 1); // pede 2 acertos quando possível
  return score >= minimo;
}
  /** =================== ELTs =================== **/
  const $backdrop       = document.getElementById('modalImagem');
  const $miSlotGrid     = document.getElementById('miSlotGrid');
  const $miBankGrid     = document.getElementById('imgbcoImg');
  const $hiddenFile     = document.getElementById('miHiddenFile');
  const $btnGravar      = document.getElementById('btnGravarImagens');
  const $miClose        = document.getElementById('miClose');
  const $miReloadBank   = document.getElementById('miReloadBank');
  const $miClearAll     = document.getElementById('miClearAll');

  const $miProdId       = document.getElementById('miProdId');
  const $miDescricao    = document.getElementById('miDescricao');
  const $miFornecedor   = document.getElementById('miFornecedor');
  const $miDepartamento = document.getElementById('miDepartamento');

  /** =================== HELPERS (SLOTS) =================== **/
  function firstEmptyIndex(){ for (let i=0;i<slots.length;i++) if (!slots[i]) return i; return -1; }
  function recomputeNextIndex(){ nextSlotIndex = firstEmptyIndex(); }

  function addEmptySlot(idx){
    const slot = document.createElement('div');
    slot.className = 'mi-slot empty';
    slot.dataset.idx = idx;
    slot.dataset.num = idx + 1;

    slot.addEventListener('click', () => {
      $hiddenFile.dataset.targetIdx = idx;
      $hiddenFile.value = '';
      $hiddenFile.click();
    });

    const remove = document.createElement('button');
    remove.className = 'mi-remove';
    remove.title = 'Remover';
    remove.textContent = '×';
    remove.addEventListener('click', (ev)=>{ ev.stopPropagation(); clearSlot(idx); });
    slot.appendChild(remove);

    $miSlotGrid.appendChild(slot);
    slots[idx] = null;
  }

  function resetSlots(){
    if (!$miSlotGrid) { console.warn('[slots] #miSlotGrid não encontrado'); return; }
    slots.length = 0;
    nextSlotIndex = 0;
    $miSlotGrid.innerHTML = '';
    for (let i=0;i<MAX_SLOTS;i++) addEmptySlot(i);
    console.log('[resetSlots] criados', MAX_SLOTS, 'slots');
  }

  function fillSlotWithImage(idx, src){
    const slot = $miSlotGrid.children[idx];
    if (!slot) return;
    slot.classList.remove('empty');
    slot.classList.add('filled');
    slot.innerHTML = '';

    const img = document.createElement('img');
    img.src = src;
    slot.appendChild(img);

    const remove = document.createElement('button');
    remove.className = 'mi-remove';
    remove.textContent = '×';
    remove.title = 'Remover';
    remove.addEventListener('click', (ev)=>{ ev.stopPropagation(); clearSlot(idx); });
    slot.appendChild(remove);

    recomputeNextIndex();
  }

  function clearSlot(idx){
    const slot = $miSlotGrid.children[idx];
    if (!slot) return;
    slot.className = 'mi-slot empty';
    slot.innerHTML = '';

    const remove = document.createElement('button');
    remove.className = 'mi-remove';
    remove.textContent = '×';
    remove.title = 'Remover';
    remove.addEventListener('click', (ev)=>{ ev.stopPropagation(); clearSlot(idx); });
    slot.appendChild(remove);

    slots[idx] = null;
    recomputeNextIndex();
  }

  function setBankEmptyState(flag){
    if ($miBankEmpty)    $miBankEmpty.style.display    = flag ? 'block' : 'none';
    if ($miNoBankBanner) $miNoBankBanner.style.display = flag ? 'block' : 'none';
    if ($miSlotsTitle)
      $miSlotsTitle.textContent = flag
        ? 'Nenhuma imagem no banco — clique nas caixas acima para buscar no computador'
        : 'Seleção e Gravar Imagens';
  }

  /** =================== CARREGAR DADOS =================== **/
  async function carregarImagensDoProduto(produtoId, descricao, pagerUrls = []){
    const termo = (__usarFiltro && __palavrasChave.length)
  ? __palavrasChave[0]
  : (descricao || '');


    const res = await fetch(`/gravafoto/produtoImagem/buscar/${encodeURIComponent(termo)}`);
    const base = res.ok ? (await res.json()) : [];
    let doBanco = (Array.isArray(base) ? base : [])
      .map(x => ({ url: x.imagemUrl || x.url, key: x.shortkey||x.key||x._id, produtoNome: x.produtoNome||x.descricao||'' }))
      .filter(x => !!x.url);

    if (__usarFiltro) doBanco = doBanco.filter(ehDoMesmoProdutoDoc);

    const merged = [...doBanco];
    (Array.isArray(pagerUrls) ? pagerUrls : []).forEach(u => {
          const urlStr = String(u||'');
          const extra = { url:urlStr, key:null, produtoNome:urlStr };
          if (!merged.some(m => m.url === urlStr) && (!__usarFiltro || ehDoMesmoProdutoDoc(extra))){
              merged.push(extra);
          }
    });

    for (const item of merged.slice(0, MAX_SLOTS)) {
      const idx = firstEmptyIndex();
      if (idx === -1) break;
      slots[idx] = { type:'bank', url:item.url, key:item.key, origin: item.key ? 'existing' : 'pager' };
      originalSlots[idx] = { url:item.url, key:item.key };
      fillSlotWithImage(idx, item.url);
    }
  }

  async function carregarBcoImagens(params){
    $miBankGrid.innerHTML = '';
    setBankEmptyState(false);

    try {
     // const p = { ...(params||{}) };
      //if (__somenteTorneiras) p.descricao = 'torneira';
      const ROTA_BUSCA_IMAGENS = '/gravafoto/produtoImagem/buscar';

          // pega de 'p' se existir, senão de 'params', senão {}
          const src = (typeof p !== 'undefined' && p) ||
                      (typeof params !== 'undefined' && params) || {};

          // monta querystring (formato 1)
          const out = {
            ...(src.termo        ? { termo: src.termo } : {}),
            ...(src.descricao    ? { descricao: src.descricao } : {}),
            ...(src.fornecedor   ? { fornecedor: src.fornecedor } : {}),
            ...(src.departamento ? { departamento: src.departamento } : {}),
          };
          const urlQ = new URL(ROTA_BUSCA_IMAGENS, window.location.origin);
          const qs   = new URLSearchParams(out).toString();
          if (qs) urlQ.search = qs;

          // monta :termo (formato 2) como fallback
          const termoStr = String(
            src.termo || src.descricao || [src.fornecedor, src.departamento].filter(Boolean).join(' ')
          ).trim();
          const urlP = new URL(
            `${ROTA_BUSCA_IMAGENS}/${encodeURIComponent(termoStr || '')}`,
            window.location.origin
          );

          // tenta querystring; se 404, tenta :termo
          // ✅ use 'let' porque vamos reatribuir no fallback
          let r = await fetch(urlQ.toString(), { headers: { Accept: 'application/json' }, cache: 'no-store' });
          if (r.status === 404) {
            console.warn('[bcoIMG] 404 em querystring, tentando formato :termo', urlP.toString());
            r = await fetch(urlP.toString(), { headers: { Accept: 'application/json' }, cache: 'no-store' });
          }

          console.log('status', r.status);
          if (!r.ok) {
            const body = await r.text().catch(()=>'');
            throw new Error(`Falha ao buscar banco (HTTP ${r.status}) :: ${body.slice(0,120)}`);
          }

          // ✅ faça o parse UMA vez e use SEM reatribuir 'const'
          let lista = await r.json();

          console.log('LISTA = ',lista)
          // guarda cópia para fallback
          const listaOriginal = Array.isArray(lista) ? [...lista] : [];
          if (!Array.isArray(lista)) lista = [];

          // normalizador de ids (ObjectId, string, etc.)
          const normId = (v) => {
            if (!v) return '';
            const s = String(v);
            // extrai de "ObjectId('...')" se vier assim
            const m = s.match(/ObjectId\(["']?([0-9a-fA-F]{24})["']?\)/);
            const plain = m ? m[1] : s;
            return plain.replace(/["']/g,'').trim().toLowerCase();
          };

          // tenta várias chaves para achar o id alvo
          const alvoId = normId(
            (typeof src !== 'undefined' && (src.codigoId || src.codigold || src.codigo || src.codigo_id)) ||
            (typeof p   !== 'undefined' && (p.codigoId   || p.codigold   || p.codigo   || p.codigo_id)) ||
            (window.__codigoIdAtual) ||
            ''
          );

          if (__usarFiltro && alvoId) {
            const antes = lista.length;
            lista = lista.filter(d => {
              const docId = normId(d.codigoId || d.codigold || d.codigo || d.codigo_id);
              return docId && docId === alvoId;
            });

            // se zerou por divergência de tipos/nomes, mantém a lista original
            if (antes > 0 && lista.length === 0) {
              console.warn('[bcoIMG] filtro zerou com alvoId=', alvoId, ' — mantendo lista original');
              lista = listaOriginal;
            }
          }

          console.log('passando aqui', lista.length);
          //console.log('passando aqui',lista.length);
          if (!lista.length){ setBankEmptyState(true); return; }

          for (const item of lista) {

            console.log('--1546---',item);
            console.log('--1546---',lista.length);

            const card = document.createElement('div');
            card.className = 'mi-thumb';
            const img = document.createElement('img');
            img.loading = 'lazy';
            img.src = item.url;
            card.appendChild(img);

            card.addEventListener('click', ()=>{
              if (__usarFiltro && !ehDoMesmoProdutoDoc(item)) {
                  alert('A imagem não corresponde a este produto.');
                  return;
              }
              const idx = firstEmptyIndex();
              if (idx === -1) { alert('Limite de 7 imagens atingido.'); return; }
              slots[idx] = { type:'bank', url:item.url, key:item.key, origin:'new-bank' };
              fillSlotWithImage(idx, item.url);
            });

            $miBankGrid.appendChild(card);
      }
    } catch (err) {
      console.error('Erro ao carregar banco de imagens:', err);
      $miBankEmpty.style.display = 'block';
      $miBankEmpty.textContent = 'Erro ao carregar o banco de imagens.';
    }
  }

  /** =================== AÇÕES =================== **/
  const __STOP = new Set(['de','da','do','das','dos','e','com','para','por','a','o','um','uma']);
const __norm = s => String(s||'')
  .normalize('NFD').replace(/\p{Diacritic}/gu,'') // tira acentos
  .toLowerCase().trim();
const __toks = s => __norm(s).split(/[^a-z0-9]+/).filter(t => t && !__STOP.has(t));

        const __descricaoBase = () =>
  document.getElementById('miDescricao')?.value ||
  (globalThis.__termoFiltroDesc && String(globalThis.__termoFiltroDesc)) ||
  document.getElementById('campoDescricao')?.value || '';

/** retorna TRUE quando combina (cadeira deve passar; cama deve falhar) */
function matchDescricaoTexto(candidate) {
  const base = __descricaoBase();
  if (!base) return true; // sem termo, não bloqueia

  const cand = __norm(candidate);
  const keys = __toks(base).filter(t => t.length >= 4); // pega “cadeira”, “espreguicadeira” etc.

  // exige que PELO MENOS 1 token-chave do produto esteja no nome da imagem
  return keys.some(t => cand.includes(t));
}

//BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB

// opcional: mesmo critério para documentos do banco
function ehDoMesmoProdutoDoc(doc) {
  const alvo = [
    doc?.produtoNome, doc?.descricao,
    doc?.imagemUrl, doc?.key
  ].filter(Boolean).join(' ');
  return matchDescricaoTexto(alvo);
}

function filtro_computador(ev){
  const inputEl = ev?.target;
  if (!(inputEl instanceof HTMLInputElement) || inputEl.type !== 'file') return;

  const file = inputEl.files && inputEl.files[0];
  if (!file) return;

  // usa a flag dinâmica do seu modal (__usarFiltro). Se quiser sempre filtrar, troque por 'true'
  const precisaFiltrar = !!__usarFiltro;

  // 1) Filtro pelo nome do arquivo (cadeira passa; cama bloqueia)
  if (precisaFiltrar && !matchDescricaoTexto(file.name)) {
    alert('A imagem não corresponde a este produto.');
    inputEl.value = '';
    ev.preventDefault();
    ev.stopPropagation();
    if (typeof ev.stopImmediatePropagation === 'function') ev.stopImmediatePropagation();
    return;
  }

  // 2) Descobrir slot destino (dataset.targetIdx ou o primeiro vazio)
  let targetIdx = Number(inputEl.dataset.targetIdx ?? '-1');
  if (Number.isNaN(targetIdx) || targetIdx < 0) {
    targetIdx = firstEmptyIndex();
  }
  if (targetIdx < 0) {
    alert('Não há slot disponível para esta imagem.');
    inputEl.value = '';
    return;
  }

  // 3) Ler arquivo e preencher o slot
  const reader = new FileReader();
  reader.onload = () => {
    const dataUrl = String(reader.result || '');
    slots[targetIdx] = { type:'file', file, origin:'new-upload' };
    fillSlotWithImage(targetIdx, dataUrl);
    inputEl.value = ''; // permite reenviar o mesmo nome depois
  };
  reader.onerror = () => {
    console.error('Falha ao ler o arquivo:', reader.error);
    alert('Falha ao ler a imagem. Tente novamente.');
    inputEl.value = '';
  };
  reader.readAsDataURL(file);
}

/** ================ AÇÕES ================ **/
// agora o listener só delega para a função completa
$hiddenFile?.addEventListener('change', filtro_computador);


/** ================ AÇÕES ================ **/
$hiddenFile?.addEventListener('change', (ev) => {
  const file = ev.target.files?.[0];

  // usa match “positivo”: TRUE = combina → aceita; FALSE → bloqueia
  if (globalThis.__usarFiltroDescricao && file && !matchDescricaoTexto(file.name)) {
    alert('A imagem não corresponde a este produto.');
    ev.target.value = '';
    return;
  }


    //const file = ev.target.files?.[0];
    const targetIdx = Number(ev.target.dataset.targetIdx ?? '-1');
    if (!file || targetIdx < 0) return;

    const reader = new FileReader();
    reader.onload = () => {
      slots[targetIdx] = { type:'file', file, origin:'new-upload' };
      fillSlotWithImage(targetIdx, reader.result);
    };
    reader.readAsDataURL(file);
  });

  const closeModal = ()=>{
    $backdrop.classList.remove('show');
    $backdrop.setAttribute('aria-hidden', 'true');
  };

  $miClose?.addEventListener('click', closeModal);
  $backdrop?.addEventListener('click', (ev)=>{ if (ev.target === $backdrop) closeModal(); });
  window.addEventListener('keydown', (ev)=>{ if (ev.key === 'Escape' && $backdrop.classList.contains('show')) closeModal(); });

  $miReloadBank?.addEventListener('click', ()=>{
    carregarBcoImagens({
      codigo:       $miProdId.value,
      descricao:    $miDescricao.value,
      fornecedor:   $miFornecedor.value,
      departamento: $miDepartamento.value,
    });
  });

  $miClearAll?.addEventListener('click', resetSlots);

  $btnGravar?.addEventListener('click', async ()=>{
    const temAlgo = slots.some(Boolean);
    if (!temAlgo) { alert('Nenhuma imagem selecionada.'); return; }

    const sameRef = (a,b) => !!(a && b) && (
      (a.key && b.key && a.key === b.key) ||
      (!a.key && !b.key && a.url && b.url && a.url === b.url)
    );

    const unchanged=[], removed=[], refsAdd=[], uploads=[];
    for (let i=0;i<MAX_SLOTS;i++){
      const orig = originalSlots[i];
      const cur  = slots[i];
      if (!orig && !cur) continue;

      if (!orig && cur){
        if (cur.type==='file') uploads.push({idx:i});
        else refsAdd.push({idx:i, url:cur.url, key:cur.key});
        continue;
      }
      if (orig && !cur){ removed.push({idx:i, key:orig.key, url:orig.url}); continue; }

      if (cur.type==='file'){ removed.push({idx:i, key:orig.key, url:orig.url}); uploads.push({idx:i}); }
      else { if (sameRef(orig,cur)) unchanged.push({idx:i, key:orig.key}); else { removed.push({idx:i, key:orig.key, url:orig.url}); refsAdd.push({idx:i, url:cur.url, key:cur.key}); } }
    }

    const order = slots.map((s,i)=> s ? (s.type==='bank' ? {type:'bank', idx:i, key:s.key} : {type:'file', idx:i, filename:s.file?.name||null}) : null);

    console.group('[GRAVAR] diff');
    console.log('unchanged', unchanged);
    console.log('removed  ', removed);
    console.log('refsAdd  ', refsAdd);
    console.log('uploads  ', uploads);
    console.log('order    ', order);
    console.groupEnd();

    try{
      await salvarImagensCompat({
        produtoId:    $miProdId.value,
        descricao:    $miDescricao.value,
        fornecedor:   $miFornecedor.value,
        departamento: $miDepartamento.value,
        refsAdd, uploads, removed, order
      }, slots);
      alert('Imagens gravadas com sucesso.');
      closeModal();
    }catch(err){
      console.error(err);
      alert('Erro ao gravar imagens. Veja o console.');
    }
  });

  /** =================== API: ABRIR MODAL =================== **/
  async function _abrirModalImagemImpl({ produtoId='', descricao='', fornecedor='', departamento='', pagerUrls=[] } = {}){
    // preenche a faixa de info (B)
    $miProdId.value       = produtoId || '';
    $miDescricao.value    = descricao || '';
    $miFornecedor.value   = fornecedor || '';
    $miDepartamento.value = departamento || '';

    // reset baseline
    resetSlots();
    originalSlots.fill(null);

    // ativa filtro "torneira" e carrega
    __somenteTorneiras = true;

    await carregarImagensDoProduto(produtoId, descricao, pagerUrls);
    await carregarBcoImagens({ descricao, fornecedor, departamento });

    // abre modal
    $backdrop.classList.add('show');
    $backdrop.setAttribute('aria-hidden', 'false');
    
  }

  // deixa acessível para seu onChange na tabela
  window.abrirModalImagem     = _abrirModalImagemImpl;
  globalThis.abrirModalImagem = _abrirModalImagemImpl;
})(); // FIM DO IIFE (apenas um!)

/* ====== mantém abaixo as funções já existentes ====== */
/* salvarImagensCompat(...) e postSalvarImagem(...) ficam como no seu arquivo */
</script>
