
<style>
  /* ====== Container base do modal ====== */
  #modalImagem.backdrop {
    position: fixed;
    inset: 0;
    background: rgba(0,0,0,.55);
    display: none; /* controlado por .show */
    z-index: 500;
  }
  #modalImagem.backdrop.show { display: block; }

  #modalImagem .mi-dialog {
    position: absolute;
    right: 2vw;               /* encostado à direita, como o usuário costuma preferir */
    top: 4vh;
    width: min(96vw, 1180px);
    height: 92vh;
    background: #0b100f;
    color: #fff;
    border-radius: 16px;

Pensado para 9s
Show! Captei as anotações e já ajustei o modal no canvas:

Quando o banco de imagens estiver vazio, o título vira:
“Nenhuma imagem no banco — clique nas caixas acima para buscar no computador”
e aparece uma faixa de aviso logo abaixo (amarelo).

Se o banco tiver imagens, o título volta para “Seleção e Gravar Imagens”.

No POST agora mando também descricao, fornecedor e departamento junto com produtoId, refs e os arquivos.

Agora, as ligações que faltam (back-end). Abaixo estão só os trechos novos ― copie/cole.

1) Model ProdutoImagem (se ainda não existir)
/models/produtoImagem.js

const mongoose = require('mongoose');

const ProdutoImagemSchema = new mongoose.Schema({
  codigoId:   { type: mongoose.Schema.Types.ObjectId, ref: 'm_construcao', index: true },
  produtoNome:{ type: String, default: '' },
  fornecedor: { type: String, default: '' },
  departamento:{ type: String, default: '' },

  imagemUrl:  { type: String, required: true, index: true },
  key:        { type: String, required: true, index: true },
  mimeType:   { type: String, default: '' },
  size:       { type: Number, default: 0 },
}, { timestamps: true });

ProdutoImagemSchema.index({ codigoId: 1, key: 1 }, { unique: true }); // evita duplicar imagem no mesmo produto

module.exports = mongoose.models.produtoImagem
  || mongoose.model('produtoImagem', ProdutoImagemSchema);
2) Rotas de imagens
/routes/imagens.js

const express = require('express');
const router = express.Router();
const multer = require('multer');
const upload = multer({ storage: multer.memoryStorage(), limits: { fileSize: 10 * 1024 * 1024 } });

const ProdutoImagem = require('../models/produtoImagem');

const { S3Client, PutObjectCommand } = require('@aws-sdk/client-s3');

const s3 = new S3Client({
  region: process.env.SPACES_REGION, // ex: 'blr1'
  endpoint: process.env.SPACES_ENDPOINT, // ex: 'https://blr1.digitaloceanspaces.com'
  credentials: {
    accessKeyId: process.env.SPACES_KEY,
    secretAccessKey: process.env.SPACES_SECRET
  },
});

function buildPublicUrl(key) {
  // Se tiver CDN, use SPACES_CDN_HOST; senão, use bucket.endpoint
  if (process.env.SPACES_CDN_HOST) return `https://${process.env.SPACES_CDN_HOST}/${key}`;
  return `https://${process.env.SPACES_BUCKET}.${process.env.SPACES_REGION}.digitaloceanspaces.com/${key}`;
}

/**
 * GET /imagens/banco?codigo=&descricao=&fornecedor=&departamento=
 * Retorna [{ url, key }]
 */
router.get('/imagens/banco', async (req, res) => {
  try {
    const { codigo, descricao, fornecedor, departamento } = req.query;
    const filtro = {};

    // Busca inteligente por qualquer combinação enviada
    if (codigo)        filtro.$or = [{ codigoId: codigo }, { key: new RegExp(codigo, 'i') }];
    if (descricao)     filtro.produtoNome  = new RegExp(descricao, 'i');
    if (fornecedor)    filtro.fornecedor   = new RegExp(fornecedor, 'i');
    if (departamento)  filtro.departamento = new RegExp(departamento, 'i');

    const lista = await ProdutoImagem.find(filtro).sort('-createdAt').limit(120).lean();

    return res.json(lista.map(x => ({ url: x.imagemUrl, key: x.key })));
  } catch (e) {
    console.error('GET /imagens/banco erro:', e);
    res.status(500).json([]);
  }
});

/**
 * POST /imagens/salvar
 * FormData:
 *  - produtoId (string)
 *  - descricao, fornecedor, departamento (strings)
 *  - refs (JSON: [{url,key}])
 *  - uploadFiles (múltiplos)
 */
router.post('/imagens/salvar', upload.array('uploadFiles', 20), async (req, res) => {
  try {
    const { produtoId, descricao = '', fornecedor = '', departamento = '' } = req.body;
    const refs = JSON.parse(req.body.refs || '[]');

    const gravados = [];

    // 2.1) Salva ARQUIVOS novos no Spaces e registra no Mongo
    for (const file of req.files || []) {
      const safeName = file.originalname.replace(/\s+/g, '_');
      const key = `produtos/${produtoId}/${Date.now()}_${safeName}`;

      await s3.send(new PutObjectCommand({
        Bucket: process.env.SPACES_BUCKET,
        Key: key,
        Body: file.buffer,
        ContentType: file.mimetype,
        ACL: 'public-read', // ok se o bucket for público
      }));

      const url = buildPublicUrl(key);

      const doc = await ProdutoImagem.findOneAndUpdate(
        { codigoId: produtoId, key },
        {
          $setOnInsert: {
            codigoId: produtoId, produtoNome: descricao, fornecedor, departamento,
            imagemUrl: url, key, mimeType: file.mimetype, size: file.size
          }
        },
        { upsert: true, new: true }
      );
      gravados.push(doc._id);
    }

    // 2.2) Reaproveita imagens já existentes (refs do banco)
    for (const r of refs) {
      await ProdutoImagem.findOneAndUpdate(
        { codigoId: produtoId, key: r.key },
        {
          codigoId: produtoId,
          produtoNome: descricao,
          fornecedor,
          departamento,
          imagemUrl: r.url,
          key: r.key
        },
        { upsert: true, new: true }
      );
    }

    res.json({ ok: true, message: `Gravado ${gravados.length + refs.length} imagem(ns).` });
  } catch (e) {
    console.error('POST /imagens/salvar erro:', e);
    res.status(500).json({ ok: false, message: 'Falha ao gravar imagens.' });
  }
});

module.exports = router;
Montagem no app:

// server.js / app.js
const imagensRouter = require('./routes/imagens');
app.use(imagensRouter);
Env necessários (.env):

SPACES_REGION=blr1
SPACES_ENDPOINT=https://blr1.digitaloceanspaces.com
SPACES_BUCKET=seu-bucket
SPACES_KEY=xxxxx
SPACES_SECRET=yyyyy
# opcional (CDN próprio do bucket ou domínio):
SPACES_CDN_HOST=seu-bucket.blr1.digitaloceanspaces.com
3) Chamada do modal (onde lista produtos)
Exemplo no Handlebars:

<button
  class="btn btn-secondary"
  onclick="abrirModalImagem({
    produtoId: '{{_id}}',
    descricao: '{{descricao}}',
    fornecedor: '{{fornecedor.razao}}',
    departamento: '{{localloja.departamento.[0].nomeDepartamento}}'
  })">
  Selecionar / Gravar Imagens
</button>
4) Fluxo final (igual ao seu croqui)
Ao abrir, o modal já consulta o banco (D) e preenche a grade.

Se não houver imagens, aparece o aviso em C e você clica nos slots para pegar do computador.

Se houver imagens, clique na miniatura do banco para mandar para o próximo slot livre.

Gravar imagens envia tudo de uma vez para /imagens/salvar.

Se quiser, eu já adapto o filtro do /imagens/banco para bater exatamente no que você preferir (por codigoId, por fornecedor, por prefixo de key, etc.).

Dito por si:
Cuidado! Vamos devagar.Primeiro se não há imgens no bco de Imagem entrar a msg.
Dito pelo ChatGPT:

Pensado para 18s
Perfeito — vamos só no passo 1: mostrar a mensagem quando não houver imagens no banco.

Isso já está aplicado no canvas. Se quiser colar só as partes novas/necessárias no seu arquivo, são estas:

1) HTML (duas mensagens)
Em C (logo abaixo da grade de slots):

<div id="miNoBankBanner" class="mi-nobank" style="display:none">
  Não há imagens no banco. Clique nas caixas acima para escolher do seu computador.
</div>
Em D (dentro do banco de imagens) – caso ainda não tenha:

<div id="miBankEmpty" class="mi-empty-msg" style="display:none">
  Não há imagens.
</div>
2) CSS (estilo da faixa de aviso)
.mi-nobank{
  margin:8px 0 0;
  background:rgba(176,0,32,.12);
  border:1px dashed #b00020;
  color:#2b0008;
  font-weight:800;
  padding:8px 10px;
  border-radius:10px;
}
3) JS (ligação: ligar/desligar mensagens)
Dentro do script do modal, adicione estes refs:

const $miSlotsTitle   = document.querySelector('.mi-slots-title');
const $miNoBankBanner = document.getElementById('miNoBankBanner');
const $miBankEmpty    = document.getElementById('miBankEmpty');
Crie o helper e use-o dentro de carregarBcoImagens:

function setBankEmptyState(flag){
  // D: mensagem “Não há imagens.”
  if ($miBankEmpty) $miBankEmpty.style.display = flag ? 'block' : 'none';
  // C: faixa de orientação + título
  if ($miNoBankBanner) $miNoBankBanner.style.display = flag ? 'block' : 'none';
  if ($miSlotsTitle)
    $miSlotsTitle.textContent = flag
      ? 'Nenhuma imagem no banco — clique nas caixas acima para buscar no computador'
      : 'Seleção e Gravar Imagens';
}
No início de carregarBcoImagens(...):

$miBankGrid.innerHTML = '';
setBankEmptyState(false);
E logo após receber a lista:

if (!Array.isArray(lista) || lista.length === 0) {
  setBankEmptyState(true);
  return;
}
Resultado: se o endpoint retornar [] (ou der erro), aparecem:

Em D: “Não há imagens.”

Em C: a faixa de orientação e o título mudam para guiar o usuário a clicar nas caixas.

Quer testar rapidamente? Force o GET /imagens/banco a retornar [] por um instante e abra o modal — as mensagens devem aparecer.
Se estiver ok, seguimos para o próximo passo (clique no banco → preencher slot).

Dito por si:
Por favor repita as instruções colocando em vermelho a linha anterior e posterior ao código novo a ser inserido
Dito pelo ChatGPT:

Pensado para 36s
Perfeito. Aqui vão apenas as inserções para a mensagem “não há imagens no banco”, com a linha anterior e posterior marcadas em vermelho (simbolizei o vermelho com 🔴):

1) HTML — faixa de aviso em C (logo abaixo da grade de slots)
<!-- 🔴 ANTERIOR -->
<div id="miSlotGrid" class="mi-slot-grid"></div>

<!-- NOVO -->
<div id="miNoBankBanner" class="mi-nobank" style="display:none">
  Não há imagens no banco. Clique nas caixas acima para escolher do seu computador.
</div>

<!-- 🔴 POSTERIOR -->
</section>
2) HTML — mensagem em D (dentro do banco de imagens)
<!-- 🔴 ANTERIOR -->
<div id="imgbcoImg" class="mi-bank-grid"></div>

<!-- NOVO -->
<div id="miBankEmpty" class="mi-empty-msg" style="display:none">
  Não há imagens.
</div>

<!-- 🔴 POSTERIOR -->
</section>
3) CSS — estilo da faixa de aviso (coloque após os estilos de .mi-slots-title)
/* 🔴 ANTERIOR */
.mi-slots-title { color: #1a1a1a; font-weight: 800; }

/* NOVO */
.mi-nobank{
  margin: 8px 0 0;
  background: rgba(176,0,32,.12);
  border: 1px dashed #b00020;
  color: #2b0008;
  font-weight: 800;
  padding: 8px 10px;
  border-radius: 10px;
}

/* 🔴 POSTERIOR */
.mi-slot-grid {
  display: grid; grid-template-columns: repeat(6, minmax(120px,1fr));
  gap: 12px; align-items: stretch;
}
4) JS — referências aos elementos das mensagens (adicione logo após $miClearAll)
// 🔴 ANTERIOR
const $miClearAll   = document.getElementById('miClearAll');

// NOVO
const $miSlotsTitle   = document.querySelector('.mi-slots-title');
const $miNoBankBanner = document.getElementById('miNoBankBanner');
const $miBankEmpty    = document.getElementById('miBankEmpty');

// 🔴 POSTERIOR
const $miSlotGrid   = document.getElementById('miSlotGrid');
5) JS — lógica para mostrar/ocultar as mensagens dentro de carregarBcoImagens
5.1 Inserir o helper logo após a linha da função
// 🔴 ANTERIOR
async function carregarBcoImagens(params){

// NOVO
  function setBankEmptyState(flag){
    if ($miBankEmpty)    $miBankEmpty.style.display    = flag ? 'block' : 'none';   // D
    if ($miNoBankBanner) $miNoBankBanner.style.display = flag ? 'block' : 'none';   // C
    if ($miSlotsTitle)   $miSlotsTitle.textContent = flag
      ? 'Nenhuma imagem no banco — clique nas caixas acima para buscar no computador'
      : 'Seleção e Gravar Imagens';
  }

// 🔴 POSTERIOR
  $miBankGrid.innerHTML = '';
5.2 No início da função, substituir a linha que escondia manualmente o vazio
// 🔴 ANTERIOR
$miBankGrid.innerHTML = '';
$miBankEmpty.style.display = 'none';

// NOVO
$miBankGrid.innerHTML = '';
setBankEmptyState(false);

// 🔴 POSTERIOR
try {
5.3 Quando a lista vier vazia, substituir o bloco
// 🔴 ANTERIOR
if (!Array.isArray(lista) || lista.length === 0) {
  $miBankEmpty.style.display = 'block';
  return;
}

// NOVO
if (!Array.isArray(lista) || lista.length === 0) {
  setBankEmptyState(true);
  return;
}

// 🔴 POSTERIOR
for (const item of lista) {
Com isso, quando o endpoint do banco retornar [] (ou em caso de erro), você verá:

Em D: “Não há imagens.”

Em C: a faixa de orientação e o título mudando para guiar o clique nos slots.

Se estiver ok, a gente parte para o passo 2 (clique no banco → preenche slot).

Dito por si:
Esse código não foi achado anteriormente
Dito pelo ChatGPT:

Pensado para 37s
Tranquilo! Quando a linha exata não aparece, use âncoras por ID (são as mais seguras). Abaixo estão as inserções com a linha anterior e posterior em vermelho. Se alguma âncora ainda não existir no seu arquivo, use o Plano B no final (bloco completo da seção).

(C) HTML — Faixa de aviso logo após a grade de slots
<!-- 🔴 ANTERIOR -->
<div id="miSlotGrid" class="mi-slot-grid"></div>

<!-- NOVO -->
<div id="miNoBankBanner" class="mi-nobank" style="display:none">
  Não há imagens no banco. Clique nas caixas acima para escolher do seu computador.
</div>

<!-- 🔴 POSTERIOR -->
</section><!-- fecha .mi-slots -->
(D) HTML — Mensagem “Não há imagens” dentro do banco
<!-- 🔴 ANTERIOR -->
<div id="imgbcoImg" class="mi-bank-grid"></div>

<!-- NOVO -->
<div id="miBankEmpty" class="mi-empty-msg" style="display:none">
  Não há imagens.
</div>

<!-- 🔴 POSTERIOR -->
</section><!-- fecha .mi-bank -->
CSS — Estilo da faixa de aviso (coloque perto dos estilos da área de slots)
/* 🔴 ANTERIOR */
.mi-slots-title { color: #1a1a1a; font-weight: 800; }

/* NOVO */
.mi-nobank{
  margin: 8px 0 0;
  background: rgba(176,0,32,.12);
  border: 1px dashed #b00020;
  color: #2b0008;
  font-weight: 800;
  padding: 8px 10px;
  border-radius: 10px;
}

/* 🔴 POSTERIOR */
.mi-slot-grid {
  display: grid; grid-template-columns: repeat(6, minmax(120px,1fr));
  gap: 12px; align-items: stretch;
}
JS — Referências aos elementos (cole próximo das outras const de DOM)
// 🔴 ANTERIOR
const $miClearAll   = document.getElementById('miClearAll');

// NOVO
const $miSlotsTitle   = document.querySelector('.mi-slots-title');
const $miNoBankBanner = document.getElementById('miNoBankBanner');
const $miBankEmpty    = document.getElementById('miBankEmpty');

// 🔴 POSTERIOR
const $miSlotGrid   = document.getElementById('miSlotGrid');
const $miBankGrid   = document.getElementById('imgbcoImg');
JS — Lógica para exibir/ocultar as mensagens
1) Crie o helper (logo no começo da função que carrega o banco ou em escopo global)
// 🔴 ANTERIOR
async function carregarBcoImagens(params){

// NOVO
  function setBankEmptyState(flag){
    if ($miBankEmpty)    $miBankEmpty.style.display    = flag ? 'block' : 'none';   // D
    if ($miNoBankBanner) $miNoBankBanner.style.display = flag ? 'block' : 'none';   // C
    if ($miSlotsTitle)   $miSlotsTitle.textContent = flag
      ? 'Nenhuma imagem no banco — clique nas caixas acima para buscar no computador'
      : 'Seleção e Gravar Imagens';
  }

// 🔴 POSTERIOR
  $miBankGrid.innerHTML = '';
2) No início do carregamento, desligue as mensagens
// 🔴 ANTERIOR
$miBankGrid.innerHTML = '';
$miBankEmpty.style.display = 'none';

// NOVO
$miBankGrid.innerHTML = '';
setBankEmptyState(false);

// 🔴 POSTERIOR
try {
3) Quando vier lista vazia, ligue as mensagens
// 🔴 ANTERIOR
if (!Array.isArray(lista) || lista.length === 0) {
  $miBankEmpty.style.display = 'block';
  return;
}

// NOVO
if (!Array.isArray(lista) || lista.length === 0) {
  setBankEmptyState(true);
  return;
}

// 🔴 POSTERIOR
for (const item of lista) {
🔁 Plano B (se as âncoras ainda não existirem)
C: garanta que existe <div id="miSlotGrid" ...></div> dentro de <section class="mi-slots">. Se não existir, pode colar todo este bloco:

<section class="mi-slots">
  <div class="mi-slots-header">
    <div class="mi-slots-title">Seleção e Gravar Imagens</div>
    <div class="mi-toolbar"><button id="miClearAll" class="mi-btn danger">Limpar seleção</button></div>
  </div>
  <div id="miSlotGrid" class="mi-slot-grid"></div>
  <div id="miNoBankBanner" class="mi-nobank" style="display:none">Não há imagens no banco. Clique nas caixas acima para escolher do seu computador.</div>
</section>
D: garanta que existe <div id="imgbcoImg" ...></div> dentro de <section class="mi-bank">. Se não existir, use:

<section class="mi-bank">
  <div class="mi-bank-title">Div ⇒ Bco Imagem</div>
  <div id="imgbcoImg" class="mi-bank-grid"></div>
  <div id="miBankEmpty" class="mi-empty-msg" style="display:none">Não há imagens.</div>
</section>
Com isso, a mensagem aparece certinho quando o banco retornar vazio. Se quiser, sigo para o passo 2 (clique no banco → preencher slot).

Dito por si:
repetindo=> const $miClearAll   = document.getElementById('miClearAll'); Não foi achado anteriromente
Dito pelo ChatGPT:

Pensado para 24s
Boa! Se essa linha não existe no seu arquivo, a gente cria o botão no HTML e declara a constante no JS usando âncoras que com certeza você tem. Abaixo estão as inserções com a linha anterior e posterior em vermelho.

1) HTML — colocar o botão Limpar seleção (id miClearAll)
Dentro da seção dos slots (C). Se você já tem o cabeçalho dos slots, insira assim:

<!-- 🔴 ANTERIOR -->
<div class="mi-slots-title">Seleção e Gravar Imagens</div>

<!-- NOVO -->
<div class="mi-toolbar">
  <button id="miClearAll" class="mi-btn danger">Limpar seleção</button>
</div>

<!-- 🔴 POSTERIOR -->
</div><!-- fecha .mi-slots-header -->
Se não existir o cabeçalho .mi-slots-header, use este bloco completo (cole dentro de <section class="mi-slots"> ... </section>):

<!-- 🔴 ANTERIOR -->
<section class="mi-slots">

<!-- NOVO -->
  <div class="mi-slots-header">
    <div class="mi-slots-title">Seleção e Gravar Imagens</div>
    <div class="mi-toolbar">
      <button id="miClearAll" class="mi-btn danger">Limpar seleção</button>
    </div>
  </div>

<!-- 🔴 POSTERIOR -->
  <div id="miSlotGrid" class="mi-slot-grid"></div>
2) JS — declarar a constante const $miClearAll = ...
Escolha uma das âncoras que você tem no arquivo e insira logo abaixo dela.

Opção A (logo após miClose)
// 🔴 ANTERIOR
const $miClose      = document.getElementById('miClose');

// NOVO
const $miClearAll   = document.getElementById('miClearAll');

// 🔴 POSTERIOR
const $miSlotGrid   = document.getElementById('miSlotGrid');
Opção B (se preferir, após miReloadBank)
// 🔴 ANTERIOR
const $miReloadBank = document.getElementById('miReloadBank');

// NOVO
const $miClearAll   = document.getElementById('miClearAll');

// 🔴 POSTERIOR
const $miSlotGrid   = document.getElementById('miSlotGrid');
Opção C (se não tiver $miSlotGrid, use o miHiddenFile como âncora)
// 🔴 ANTERIOR
const $hiddenFile   = document.getElementById('miHiddenFile');

// NOVO
const $miClearAll   = document.getElementById('miClearAll');

// 🔴 POSTERIOR
const $btnGravar    = document.getElementById('btnGravarImagens');
Se nenhuma dessas âncoras existir, cole a linha da constante junto das outras const de elementos (logo após const $backdrop = ... e const $miClose = ...).

3) JS — ligar o clique do botão para limpar os slots
Coloque o listener perto dos outros addEventListener (recarregar banco / gravar):

// 🔴 ANTERIOR
$miReloadBank?.addEventListener('click', ()=>{
  const params = {
    codigo:      $miProdId.value,
    descricao:   $miDescricao.value,
    fornecedor:  $miFornecedor.value,
    departamento:$miDepartamento.value,
  };
  carregarBcoImagens(params);
});

// NOVO
$miClearAll?.addEventListener('click', ()=>{
  resetSlots();
});

// 🔴 POSTERIOR
$btnGravar?.addEventListener('click', async ()=>{
  const temAlgo = slots.some(Boolean);
  if (!temAlgo) { alert('Nenhuma imagem selecionada.'); return; }
  // ...
});
Pronto — com isso, mesmo que a linha não existisse antes, você cria o botão e faz a ligação no JS. Se quiser, mando o próximo passo com o mesmo esquema (mostrar/faixa quando o banco vier vazio ou clicar no banco → preencher slot).

Dito por si:
Imagem carregada
Me ajuda aí
Dito pelo ChatGPT:

Pensado para 50s
Bora corrigir isso passo a passo. O erro vem de usar getElementsByName('imgbcoImg') (retorna NodeList(0), porque seu <div> tem id, não name). Daí cont[0] fica undefined e o appendChild quebra.

Ajuste com os patches abaixo (com linha anterior e posterior em vermelho):

1) HTML — garantir o container do banco
Se ainda não tiver, deixe seu container assim (note o id e, por segurança, adicionei também o name):

<!-- 🔴 ANTERIOR -->
<div id="imgbcoImg" class="mi-bank-grid"></div>

<!-- NOVO -->
<div id="imgbcoImg" name="imgbcoImg" class="mi-bank-grid"></div>

<!-- 🔴 POSTERIOR -->
<div id="miBankEmpty" class="mi-empty-msg" style="display:none">Não há imagens.</div>
Ter name="imgbcoImg" evita erro caso exista código antigo buscando por getElementsByName.

2) JS — pegar por ID (e com guarda)
Substitua o trecho que seleciona o container e zera o conteúdo:

// 🔴 ANTERIOR
const cont = document.getElementsByName('imgbcoImg'); // seu container roxo
if (!cont) return;
cont.innerHTML = '';

// NOVO
const cont = document.getElementById('imgbcoImg'); // pegue pelo ID
if (!cont) {
  console.warn('[bcoImg] Container #imgbcoImg não encontrado.');
  return;
}
cont.innerHTML = ''; // ou cont.replaceChildren();

// 🔴 POSTERIOR
console.log('o elemento = a divisão que conterá as imagens do bco de imagem => ', cont);
3) JS — remover o [0] e usar cont direto
Mais embaixo, troque o uso de cont[0]:

// 🔴 ANTERIOR
const elemento = cont[0];
console.log(' o elemento => ', elemento);

// NOVO
const elemento = cont;
console.log(' o elemento => ', elemento);

// 🔴 POSTERIOR
// Se a lista é vazia então mando msg
4) JS — mensagem quando a lista vier vazia
Troque seu bloco de lista vazia para usar o mesmo container e, se existir, mostrar as mensagens do modal:

// 🔴 ANTERIOR
if (!Array.isArray(lista) || lista.length === 0) {
  // elemento.innerHTML = '<div class="text-center text-light">Nenhum registro encontrado.</div>';
  return;
}

// NOVO
if (!Array.isArray(lista) || lista.length === 0) {
  const vazio = document.getElementById('miBankEmpty');      // D
  const faixa = document.getElementById('miNoBankBanner');   // C
  const titulo = document.querySelector('.mi-slots-title');  // C
  if (vazio) vazio.style.display = 'block';
  if (faixa) faixa.style.display = 'block';
  if (titulo) titulo.textContent = 'Nenhuma imagem no banco — clique nas caixas acima para buscar no computador';
  return;
}

// 🔴 POSTERIOR
// Pega a lista e preenche a divisão que conterá as imagens
5) JS — ao criar os boxes, anexe em elemento
// 🔴 ANTERIOR
const box = document.createElement('div');
// ...
elemento.appendChild(box);

// NOVO
const box = document.createElement('div');
// ...
elemento.appendChild(box);

// 🔴 POSTERIOR
// (continua seu forEach normalmente)
(Aqui nada muda, só reforçando: agora elemento não é undefined.)

6) Observação sobre o erro “$ is not defined”
Esse é outro problema: existe algum script (ex.: dashboard.js) usando jQuery ($) sem a lib estar carregada. Ou você:

inclui jQuery na página, ou

troca o $ por vanilla JS (preferível neste projeto).

Resumo
O NodeList(0) veio de getElementsByName('imgbcoImg') (não havia name).

Trocamos para getElementById('imgbcoImg') e removemos o [0].

Ligamos a mensagem de vazio com os elementos do modal (#miBankEmpty, #miNoBankBanner, .mi-slots-title).

Se rodar de novo, aquele “Cannot read properties of undefined (reading 'appendChild')” some. Quer que eu revise o resto da função (o forEach completo) pra garantir que os cards do banco renderizem certinho?

Dito por si:
Esse $ aí eu não sei de onde apareceu> Como resolver isso?
Dito pelo ChatGPT:

Pensado para 46s
Esse erro “$ is not defined” aparece quando algum arquivo usa jQuery ($) mas a lib não está carregada ou foi carregada depois do seu script. Você tem duas saídas:

Opção A (rápida): carregar jQuery antes do seu JS
No layout onde você inclui seus scripts (ex.: admin-empresa.handlebars, central.handlebars ou o layout dessa página), garanta que jQuery vem antes do seu dashboard.js (ou o arquivo que o erro cita).
Insira assim:

<!-- 🔴 ANTERIOR -->
<script src="/js/dashboard.js"></script>

<!-- NOVO -->
<script src="https://code.jquery.com/jquery-3.7.1.min.js" crossorigin="anonymous"></script>
<script src="/js/dashboard.js"></script>

<!-- 🔴 POSTERIOR -->
</body>
Se já existe <script src="/js/dashboard.js"> em outro lugar, mova-o para baixo da linha do jQuery.

Se você preferir usar um arquivo local: baixe jquery-3.7.1.min.js para /public/vendor/jquery-3.7.1.min.js e troque a linha do CDN por:

<script src="/vendor/jquery-3.7.1.min.js"></script>
Opção B (recomendada a longo prazo): remover jQuery do arquivo que quebra
Conserta definitivamente sem depender do $. No arquivo que o erro aponta (na sua imagem estava dashboard.js:1), troque os padrões jQuery por Vanilla JS. Aqui vão os patches mais comuns:

1) $(document).ready(...) → DOMContentLoaded
// 🔴 ANTERIOR
$(function(){ 
  // seu código aqui
});

// NOVO
document.addEventListener('DOMContentLoaded', function(){
  // seu código aqui
});

// 🔴 POSTERIOR
// (restante do arquivo)
2) Seletores e valores
// 🔴 ANTERIOR
const el = $('#meuId');
const val = $('#meuInput').val();
$('.btn-salvar').on('click', salvar);

// NOVO
const el = document.getElementById('meuId');
const val = document.getElementById('meuInput').value;
document.querySelectorAll('.btn-salvar')
  .forEach(btn => btn.addEventListener('click', salvar));

// 🔴 POSTERIOR
// (restante do arquivo)
3) HTML/texto
// 🔴 ANTERIOR
$('#container').html('<p>ok</p>');
$('#titulo').text('Pronto');

// NOVO
document.getElementById('container').innerHTML = '<p>ok</p>';
document.getElementById('titulo').textContent = 'Pronto';

// 🔴 POSTERIOR
// (restante do arquivo)
4) Ajax (jQuery) → fetch
// 🔴 ANTERIOR
$.ajax({
  url: '/imagens/banco',
  method: 'GET',
  success: (data)=> render(data),
  error: ()=> alert('erro')
});

// NOVO
fetch('/imagens/banco')
  .then(r => r.ok ? r.json() : Promise.reject())
  .then(data => render(data))
  .catch(() => alert('erro'));

// 🔴 POSTERIOR
// (restante do arquivo)
Como achar onde o $ está sendo usado
VSCode: Ctrl+Shift+F e busque por $(' e por $. no projeto.

Navegador: abra o erro na aba Console, clique no link do arquivo (ex.: dashboard.js:1), veja a linha exata (geralmente começa com $(...)).

Qual escolher?
Se quer resolver agora: use a Opção A (carregue jQuery antes do seu script).

Se quer padronizar e evitar dependência: siga a Opção B e eu te ajudo a converter o trecho que aparecer.
Se você colar aqui as 5–10 primeiras linhas do arquivo que acusa o erro, eu já devolvo com as substituições prontas no mesmo formato (linhas anterior/posterior em vermelho).

Dito por si:
Imagem carregada
vamos lá. Colocar 7 foto-box  na divisão C "amarela" quando carregar o MODAL. Diminiuir a heigth C- Amarela já que os 7 foto-box cade em uma linha. Aumenta a divisão verde já que estamos diminuindo a  amarela. Agora que temos a foto-box carregada vamos clicar sobre a foto e tranferir para foto-box da divisão amarela
Dito pelo ChatGPT:

Pensado para 57s
top! vamos fazer exatamente isso em 3 pontos: (1) 7 foto-box fixos; (2) C (amarela) mais baixa e D (banco – verde) mais alta; (3) clicar no banco preenche o próximo slot livre (até 7).
Abaixo vão só os patches com linha anterior e posterior em vermelho.

JS – quantidade de slots = 7
// 🔴 ANTERIOR
const MAX_SLOTS = 12;

// NOVO
const MAX_SLOTS = 7;

// 🔴 POSTERIOR
const slots = [];             // { type: 'file'|'bank', ... }
JS – numerar os slots 1..7 (aparece dentro de cada box)
// 🔴 ANTERIOR
const idx = $miSlotGrid.children.length;
const slot = document.createElement('div');
slot.className = 'mi-slot empty';
slot.dataset.idx = idx;

// NOVO
const idx = $miSlotGrid.children.length;
const slot = document.createElement('div');
slot.className = 'mi-slot empty';
slot.dataset.idx = idx;
slot.dataset.num = idx + 1; // numeração 1..7 visível no canto

// 🔴 POSTERIOR
slot.addEventListener('click', () => {
(o clique do banco → slot já está implementado; com MAX_SLOTS=7 o limite fica garantido.)

CSS – C (amarela) baixa e D (verde) alta
/* 🔴 ANTERIOR */
.mi-body { flex: 1; display: grid; grid-template-rows: 1fr 210px; }

/* NOVO */
.mi-body { flex: 1; display: grid; grid-template-rows: 220px 1fr; }  /* C ≈ 220px, D ocupa o resto */

/* 🔴 POSTERIOR */
/* 🔴 ANTERIOR */
.mi-slots { background: #ffe606; padding: 14px 14px 8px; overflow: auto; }

/* NOVO */
.mi-slots { background: #ffe606; padding: 14px; overflow: hidden; }  /* altura fechada para 1 linha */

/* 🔴 POSTERIOR */
.mi-slots-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; }
CSS – grade com 7 colunas (uma linha)
/* 🔴 ANTERIOR */
.mi-slot-grid {
  display: grid; grid-template-columns: repeat(6, minmax(120px,1fr));
  gap: 12px; align-items: stretch;
}

/* NOVO */
.mi-slot-grid {
  display: grid; grid-template-columns: repeat(7, minmax(120px,1fr));
  gap: 12px; align-items: stretch;
}

/* 🔴 POSTERIOR */
.mi-slot {
  background: #ff00b9;
  border-radius: 14px; position: relative; overflow: hidden; cursor: pointer;
  display: grid; place-items: center; min-height: 150px; border: 4px solid #ffe606;
}
CSS – número visível nos boxes
/* 🔴 ANTERIOR */
.mi-slot { /* ... como acima ... */ }

/* NOVO */
.mi-slot::before{
  content: attr(data-num);
  position: absolute; top: 6px; left: 10px;
  font-weight: 900; font-size: 18px;
  color: #8d0037; text-shadow: 0 1px 0 #fff;
}

/* 🔴 POSTERIOR */
.mi-slot img { width: 100%; height: 100%; object-fit: cover; display: block; }
(já estava pronto, só confirmando)
O clique no banco preenche o próximo slot livre (até 7):

// 🔴 ANTERIOR
card.addEventListener('click', ()=>{

// NOVO
card.addEventListener('click', ()=>{                  // D → C
  const idx = firstEmptyIndex();
  if (idx === -1) { alert('Limite de 7 imagens atingido.'); return; }
  slots[idx] = { type: 'bank', url: item.url, key: item.key };
  fillSlotWithImage(idx, item.url);
});

// 🔴 POSTERIOR
$miBankGrid.appendChild(card);
Feito isso:

o modal já abre com 7 foto-box vazios e numerados;

a área C fica baixa (1 linha) e a D cresce;

ao clicar numa miniatura do banco, a imagem vai para o próximo box livre até o limite de 7.

Se quiser que o número suma quando o slot estiver preenchido, eu mando um micro-patch no CSS (trocar ::before para aparecer só em .empty).

Dito por si:
Não localizei essa funçõa => "selecionarImagemExistente(img))" . Tabém não apareceu os 7 slots VAZIOS -só a representação - na faixa Amarela 
Dito pelo ChatGPT:

Pensado para 56s
vamos direto ao ponto e garantir 3 coisas:

o MODAL abre com 7 foto-box vazios e clicáveis na faixa amarela

a faixa C (amarela) fica baixa e D (verde) maior

clicar numa imagem do banco preenche o próximo slot livre (sem precisar de selecionarImagemExistente)

Abaixo estão só os patches. Coloque exatamente onde indicado, com linha anterior e posterior em vermelho.

1) CSS — Alturas C/D e grade com 7 colunas
/* 🔴 ANTERIOR */
.mi-body { flex: 1; display: grid; grid-template-rows: 1fr 210px; }

/* NOVO */
.mi-body { flex: 1; display: grid; grid-template-rows: 220px 1fr; }  /* C menor, D maior */

/* 🔴 POSTERIOR */
/* 🔴 ANTERIOR */
.mi-slot-grid {
  display: grid; grid-template-columns: repeat(6, minmax(120px,1fr));
  gap: 12px; align-items: stretch;
}

/* NOVO */
.mi-slot-grid {
  display: grid; grid-template-columns: repeat(7, minmax(120px,1fr));
  gap: 12px; align-items: stretch;
}

/* 🔴 POSTERIOR */
.mi-slot {
  background: #ff00b9;
  border-radius: 14px; position: relative; overflow: hidden; cursor: pointer;
  display: grid; place-items: center; min-height: 150px; border: 4px solid #8d0037; /* borda vinho forte */
}
(opcional) número 1..7 visível no canto
/* 🔴 ANTERIOR */
.mi-slot { /* ...como acima... */ }

/* NOVO */
.mi-slot::before{
  content: attr(data-num);
  position: absolute; top: 6px; left: 10px;
  font-weight: 900; font-size: 18px; color: #8d0037; text-shadow: 0 1px 0 #fff;
}

/* 🔴 POSTERIOR */
.mi-slot img { width: 100%; height: 100%; object-fit: cover; display: block; }
2) JS — garantir 7 slots vazios ao abrir
2.1 Limite = 7
// 🔴 ANTERIOR
const MAX_SLOTS = 12;

// NOVO
const MAX_SLOTS = 7;

// 🔴 POSTERIOR
const slots = [];             // { type: 'file'|'bank', file?, url?, key? }
2.2 Criação dos slots vazios (ajuste do resetSlots e addEmptySlot)
// 🔴 ANTERIOR
function resetSlots(){
  slots.length = 0; nextSlotIndex = 0; $miSlotGrid.innerHTML = '';
  for (let i=0; i<MAX_SLOTS; i++) addEmptySlot();
}

function addEmptySlot(){
  const idx = $miSlotGrid.children.length;
  const slot = document.createElement('div');
  slot.className = 'mi-slot empty';
  slot.dataset.idx = idx;

// NOVO
function resetSlots(){
  slots.length = 0; nextSlotIndex = 0; $miSlotGrid.innerHTML = '';
  for (let i = 0; i < MAX_SLOTS; i++) addEmptySlot(i);  // cria exatamente 7
}

function addEmptySlot(idx){
  const slot = document.createElement('div');
  slot.className = 'mi-slot empty';
  slot.dataset.idx = idx;
  slot.dataset.num = idx + 1; // mostra 1..7 no canto

// 🔴 POSTERIOR
  slot.addEventListener('click', () => {
2.3 Garante que os 7 slots são criados na abertura
// 🔴 ANTERIOR
window.abrirModalImagem = function abrirModalImagem({ produtoId = '', descricao = '', fornecedor = '', departamento = '' } = {}){
  $miProdId.value = String(produtoId || '');
  $miDescricao.value = String(descricao || '');
  $miFornecedor.value = String(fornecedor || '');
  $miDepartamento.value = String(departamento || '');

  // zera slots (C)
  resetSlots();

// NOVO
window.abrirModalImagem = function abrirModalImagem({ produtoId = '', descricao = '', fornecedor = '', departamento = '' } = {}){
  $miProdId.value = String(produtoId || '');
  $miDescricao.value = String(descricao || '');
  $miFornecedor.value = String(fornecedor || '');
  $miDepartamento.value = String(departamento || '');

  // sempre recria os 7 slots vazios
  resetSlots();

// 🔴 POSTERIOR
  // carrega banco (D) imediatamente
  carregarBcoImagens({ codigo: produtoId, descricao, fornecedor, departamento });
Se mesmo assim não aparecerem, confira se existe <div id="miSlotGrid" class="mi-slot-grid"></div> dentro da seção amarela. Se não, adicione (veio no canvas).

3) JS — clicar no banco envia para o próximo slot livre
Sem selecionarImagemExistente (não precisamos dessa função).

Local: dentro de carregarBcoImagens(...), onde você cria cada miniatura do banco.

// 🔴 ANTERIOR
const card = document.createElement('div');
card.className = 'mi-thumb';
const img = document.createElement('img');
img.loading = 'lazy';
img.src = item.url;
card.appendChild(img);

// NOVO
const card = document.createElement('div');
card.className = 'mi-thumb';
const img = document.createElement('img');
img.loading = 'lazy';
img.src = item.url;
card.appendChild(img);

// clique do banco → preenche C
card.addEventListener('click', ()=>{
  const idx = firstEmptyIndex();
  if (idx === -1) { alert('Limite de 7 imagens atingido.'); return; }
  slots[idx] = { type: 'bank', url: item.url, key: item.key };
  fillSlotWithImage(idx, item.url);
});

// 🔴 POSTERIOR
$miBankGrid.appendChild(card);
Dicas rápidas
Não precisa de selecionarImagemExistente. Se existir em algum lugar antigo, pode remover.

Se a grade amarela não mostrar “caixas”, é porque o HTML da seção C não tem o #miSlotGrid. Garanta este trecho:

<!-- 🔴 ANTERIOR -->
<div class="mi-slots-header">...</div>

<!-- NOVO -->
<div id="miSlotGrid" class="mi-slot-grid"></div>

<!-- 🔴 POSTERIOR -->
<div id="miNoBankBanner" class="mi-nobank" style="display:none">...</div>
Com isso, ao abrir o modal você verá 7 slots vazios; ao clicar nas miniaturas do banco, elas vão preenchendo 1, 2, 3… até 7.

Dito por si:
Imagem carregada
Estou com esse conflito. Também ainda não apareceu os 7 slots na faixa amarela
Dito pelo ChatGPT:

Pensado para 27s
Boa — o conflito está aí mesmo: na sua addEmptySlot(idx) você passa o índice, mas redeclara const idx = $miSlotGrid.children.length; dentro da função. Isso anula o parâmetro e impede criar os 7 boxes certos.
Mantenha a versão com parâmetro e remova a linha que recalcula idx.

Abaixo vão os patches (com linha anterior e posterior em vermelho):

1) addEmptySlot(idx) — use o parâmetro e remova a redefinição
// 🔴 ANTERIOR
function addEmptySlot(idx){
  const idx = $miSlotGrid.children.length;
  const slot = document.createElement('div');

// NOVO
function addEmptySlot(idx){
  const slot = document.createElement('div');
  slot.className = 'mi-slot empty';
  slot.dataset.idx = idx;
  slot.dataset.num = idx + 1; // 1..7 no canto

  slot.addEventListener('click', () => {
    $hiddenFile.dataset.targetIdx = idx;
    $hiddenFile.value = '';
    $hiddenFile.click();
  });

  const remove = document.createElement('button');
  remove.className = 'mi-remove';
  remove.title = 'Remover';
  remove.textContent = '×';
  remove.addEventListener('click', (ev)=>{ ev.stopPropagation(); clearSlot(idx); });
  slot.appendChild(remove);

  $miSlotGrid.appendChild(slot);
  slots[idx] = null; // vazio
}

// 🔴 POSTERIOR
function fillSlotWithImage(idx, src){
2) resetSlots() — crie exatamente 7 slots
// 🔴 ANTERIOR
function resetSlots(){
  slots.length = 0; nextSlotIndex = 0; $miSlotGrid.innerHTML = '';
  for (let i=0; i<MAX_SLOTS; i++) addEmptySlot();
}

// NOVO
function resetSlots(){
  if (!$miSlotGrid) { console.warn('[slots] #miSlotGrid não encontrado'); return; }
  slots.length = 0;
  nextSlotIndex = 0;
  $miSlotGrid.innerHTML = '';
  for (let i = 0; i < MAX_SLOTS; i++) addEmptySlot(i); // passa i!
}

// 🔴 POSTERIOR
function firstEmptyIndex(){
3) Defina o limite em 7
// 🔴 ANTERIOR
const MAX_SLOTS = 12;

// NOVO
const MAX_SLOTS = 7;

// 🔴 POSTERIOR
const slots = []; // { type:'file'|'bank', ... }
4) Garanta que a div dos slots existe no HTML (seção amarela C)
<!-- 🔴 ANTERIOR -->
<div class="mi-slots-header"> ... </div>

<!-- NOVO -->
<div id="miSlotGrid" class="mi-slot-grid"></div>

<!-- 🔴 POSTERIOR -->
<div id="miNoBankBanner" class="mi-nobank" style="display:none">Não há imagens no banco...</div>
5) Ao abrir o modal, sempre gere os 7 slots
// 🔴 ANTERIOR
window.abrirModalImagem = function abrirModalImagem(opts = {}){
  const { produtoId='', descricao='', fornecedor='', departamento='' } = opts;
  $miProdId.value = String(produtoId);
  $miDescricao.value = String(descricao);
  $miFornecedor.value = String(fornecedor);
  $miDepartamento.value = String(departamento);
  resetSlots();

// NOVO
window.abrirModalImagem = function abrirModalImagem(opts = {}){
  const { produtoId='', descricao='', fornecedor='', departamento='' } = opts;
  $miProdId.value = String(produtoId);
  $miDescricao.value = String(descricao);
  $miFornecedor.value = String(fornecedor);
  $miDepartamento.value = String(departamento);

  resetSlots(); // cria 7

  carregarBcoImagens({ codigo: produtoId, descricao, fornecedor, departamento });
  $backdrop.classList.add('show');
  $backdrop.setAttribute('aria-hidden','false');
}

// 🔴 POSTERIOR
function closeModal(){
6) Clique no banco → preenche próximo slot livre (sem função extra)
// 🔴 ANTERIOR
// (criação do card no banco)
card.appendChild(img);

// NOVO
card.appendChild(img);
card.addEventListener('click', ()=>{
  const idx = firstEmptyIndex();
  if (idx === -1) { alert('Limite de 7 imagens atingido.'); return; }
  slots[idx] = { type: 'bank', url: item.url, key: item.key };
  fillSlotWithImage(idx, item.url);
});

// 🔴 POSTERIOR
$miBankGrid.appendChild(card);
7) CSS — uma linha com 7 colunas e C mais baixo
// 🔴 ANTERIOR
.mi-body { flex: 1; display: grid; grid-template-rows: 1fr 210px; }

// NOVO
.mi-body { flex: 1; display: grid; grid-template-rows: 220px 1fr; } /* C ↓, D ↑ */

// 🔴 POSTERIOR
// 🔴 ANTERIOR
.mi-slot-grid { display: grid; grid-template-columns: repeat(6, minmax(120px,1fr)); gap: 12px; }

// NOVO
.mi-slot-grid { display: grid; grid-template-columns: repeat(7, minmax(120px,1fr)); gap: 12px; }

// 🔴 POSTERIOR
.mi-slot { background:#ff00b9; border-radius:14px; position:relative; min-height:150px; border:4px solid #8d0037; }
Por que os 7 não apareciam?
A função recalculava idx e ignorava o parâmetro → todos os slots viravam o mesmo índice, ou nem eram criados.

Às vezes o script roda antes do HTML. Certifique-se de que o JS do modal é incluído depois do HTML do modal ou que a criação acontece dentro de abrirModalImagem() (como fizemos).

Aplique esses patches e abra o modal: você deve ver 7 boxes vazios; ao clicar numa miniatura do banco, ela preenche o próximo livre. Se algo ainda não aparecer, me diga o arquivo/linha do addEmptySlot e do resetSlots que eu ajusto no mesmo formato.

Dito por si:
addEmptySlot(idx)   Onde será chamada esse função/ É ela que vai carregar os slots
Dito pelo ChatGPT:

Pensado para 32s
Ótima pergunta. Você não chama addEmptySlot(idx) diretamente.
Quem chama é a função resetSlots(), que cria os 7 boxes vazios em loop. E resetSlots() é chamada quando o modal abre e quando você clica em Limpar seleção.

Abaixo estão os pontos exatos com linha anterior e posterior em vermelho:

1) resetSlots() é quem chama addEmptySlot(i) (7 vezes)
// 🔴 ANTERIOR
function resetSlots(){
  slots.length = 0; nextSlotIndex = 0; $miSlotGrid.innerHTML = '';
  for (let i=0; i<MAX_SLOTS; i++) addEmptySlot();

// NOVO
function resetSlots(){
  if (!$miSlotGrid) { console.warn('[slots] #miSlotGrid não encontrado'); return; }
  slots.length = 0;
  nextSlotIndex = 0;
  $miSlotGrid.innerHTML = '';
  for (let i = 0; i < MAX_SLOTS; i++) addEmptySlot(i); // 👉 aqui é onde addEmptySlot(i) é chamada 7x
}

// 🔴 POSTERIOR
function firstEmptyIndex(){
Resumo: resetSlots() é quem “carrega os slots”. Ela que chama addEmptySlot(i) e põe os 7 boxes na faixa amarela.

2) abrirModalImagem(...) chama resetSlots() ao abrir o modal
// 🔴 ANTERIOR
// preenche B (linha verde)
$miProdId.value = String(produtoId || '');
$miDescricao.value = String(descricao || '');
$miFornecedor.value = String(fornecedor || '');
$miDepartamento.value = String(departamento || '');

// NOVO
// sempre recria os 7 slots vazios
resetSlots();

// 🔴 POSTERIOR
// carrega banco (D) imediatamente
carregarBcoImagens({ codigo: produtoId, descricao, fornecedor, departamento });
3) O botão Limpar seleção também chama resetSlots()
// 🔴 ANTERIOR
$miReloadBank?.addEventListener('click', ()=>{
  const params = { codigo:$miProdId.value, descricao:$miDescricao.value, fornecedor:$miFornecedor.value, departamento:$miDepartamento.value };
  carregarBcoImagens(params);
});

// NOVO
$miClearAll?.addEventListener('click', ()=>{
  resetSlots(); // recria os 7 slots vazios
});

// 🔴 POSTERIOR
$btnGravar?.addEventListener('click', async ()=>{
  const temAlgo = slots.some(Boolean);
  if (!temAlgo) { alert('Nenhuma imagem selecionada.'); return; }
  // ...
});
4) Implementação correta de addEmptySlot(idx) (sem recalcular idx)
// 🔴 ANTERIOR
function addEmptySlot(idx){
  const idx = $miSlotGrid.children.length;  // ❌ NÃO use esta linha
  const slot = document.createElement('div');

// NOVO
function addEmptySlot(idx){
  const slot = document.createElement('div');
  slot.className = 'mi-slot empty';
  slot.dataset.idx = idx;
  slot.dataset.num = idx + 1; // numeração 1..7 no canto

  // clicar no slot → abre seletor local
  slot.addEventListener('click', () => {
    $hiddenFile.dataset.targetIdx = idx;
    $hiddenFile.value = '';
    $hiddenFile.click();
  });

  const remove = document.createElement('button');
  remove.className = 'mi-remove';
  remove.title = 'Remover';
  remove.textContent = '×';
  remove.addEventListener('click', (ev)=>{ ev.stopPropagation(); clearSlot(idx); });
  slot.appendChild(remove);

  $miSlotGrid.appendChild(slot);
  slots[idx] = null; // marca vazio
}

// 🔴 POSTERIOR
function fillSlotWithImage(idx, src){
5) Checklist rápido se os 7 boxes ainda não aparecerem
Confirme que existe o container na faixa amarela:

<!-- 🔴 ANTERIOR -->
<div class="mi-slots-header">...</div>
<!-- NOVO -->
<div id="miSlotGrid" class="mi-slot-grid"></div>
<!-- 🔴 POSTERIOR -->
<div id="miNoBankBanner" class="mi-nobank" style="display:none">...</div>
Garanta const MAX_SLOTS = 7;.

O JS do modal roda depois do HTML ou os slots são criados dentro de abrirModalImagem() (como acima).

A função abrirModalImagem({...}) está sendo chamada ao clicar no botão da lista de produtos.

Com isso claro: você nunca chama addEmptySlot manualmente.
Quem faz o serviço é resetSlots(), chamado ao abrir o modal e ao limpar seleção.

Dito por si:
window.abrirModalImagem = function abrirModalImagem({ produtoId = '', descricao = '', fornecedor = '', departamento = '' } = {}){  Não está funcionado. Tem ficar no começo do <script>?
Dito pelo ChatGPT:

Pensado para 1m 16s
Boa! Não precisa ficar “no começo do <script>”. O que precisa é:

o arquivo ser carregado depois do HTML do modal

não haver erros antes da linha (senão o script para)

a função ficar global (visível pelo botão/console)

Aqui vão os patches com linha anterior e posterior em vermelho para garantir isso.

A) HTML — inclua o JS depois do HTML do modal e com defer
Se hoje está como módulo ou sem defer, troque:

<!-- 🔴 ANTERIOR -->
<script type="module" src="/js/modal-imagem.js"></script>

<!-- NOVO -->
<script defer src="/js/modal-imagem.js"></script>

<!-- 🔴 POSTERIOR -->
</body>
defer garante que o script só roda após o HTML estar parseado (o modal já existe no DOM).

B) JS — exponha a função no escopo global (compatível com module ou não)
Troque a linha que define a função:

// 🔴 ANTERIOR
window.abrirModalImagem = function abrirModalImagem({ produtoId = '', descricao = '', fornecedor = '', departamento = '' } = {}){

// NOVO
globalThis.abrirModalImagem = function abrirModalImagem({ produtoId = '', descricao = '', fornecedor = '', departamento = '' } = {}){

// 🔴 POSTERIOR
  $miProdId.value = String(produtoId || '');
globalThis funciona tanto em scripts normais quanto em type="module".

C) JS — mantenha a função depois das referências de DOM
Coloque a definição logo depois das const dos elementos e helpers, para que $miProdId, $miSlotGrid etc. já existam:

// 🔴 ANTERIOR
const $btnGravar    = document.getElementById('btnGravarImagens');

// (… helpers: resetSlots, addEmptySlot, firstEmptyIndex, carregarBcoImagens …)

// NOVO
globalThis.abrirModalImagem = function abrirModalImagem({ produtoId = '', descricao = '', fornecedor = '', departamento = '' } = {}){
  // preenche a faixa B (verde)
  $miProdId.value       = String(produtoId || '');
  $miDescricao.value    = String(descricao || '');
  $miFornecedor.value   = String(fornecedor || '');
  $miDepartamento.value = String(departamento || '');

  // cria 7 slots vazios
  resetSlots();

  // carrega banco (D)
  carregarBcoImagens({ codigo: produtoId, descricao, fornecedor, departamento });

  // exibe modal
  $backdrop.classList.add('show');
  $backdrop.setAttribute('aria-hidden','false');
};

// 🔴 POSTERIOR
function closeModal(){
D) HTML do botão — chame globalmente
Se o botão chama inline, garanta que aponta para a global:

<!-- 🔴 ANTERIOR -->
<button onclick="abrirModalImagem({ produtoId: '{{_id}}', descricao:'{{descricao}}', fornecedor:'{{fornecedor.razao}}', departamento:'{{departamento}}' })">
  Selecionar / Gravar Imagens
</button>

<!-- NOVO -->
<button onclick="window.abrirModalImagem({ produtoId: '{{_id}}', descricao:'{{descricao}}', fornecedor:'{{fornecedor.razao}}', departamento:'{{departamento}}' })">
  Selecionar / Gravar Imagens
</button>

<!-- 🔴 POSTERIOR -->
(tanto abrirModalImagem(...) quanto window.abrirModalImagem(...) funcionarão; usar window. evita conflito de escopo.)

E) Teste rápido no console
Abra a página, pressione F12 → Console e rode:

abrirModalImagem && abrirModalImagem({ produtoId:'teste', descricao:'X', fornecedor:'Y', departamento:'Z' })
Se imprimir undefined, tente com o prefixo:

window.abrirModalImagem && window.abrirModalImagem({ produtoId:'teste' })
Se ainda der “abrirModalImagem is not defined”, verifique o primeiro erro no console (ex.: “$ is not defined”). Qualquer erro antes da definição interrompe o script e a função não é criada — corrija-o ou comente temporariamente.

F) Reforço: quem desenha os 7 slots
abrirModalImagem(...) chama resetSlots(), e resetSlots() chama addEmptySlot(i) 7 vezes.

Confirme estes trechos:

// 🔴 ANTERIOR
const MAX_SLOTS = 12;

// NOVO
const MAX_SLOTS = 7;

// 🔴 POSTERIOR
// 🔴 ANTERIOR
function resetSlots(){
  slots.length = 0; nextSlotIndex = 0; $miSlotGrid.innerHTML = '';
  for (let i=0; i<MAX_SLOTS; i++) addEmptySlot();
}

// NOVO
function resetSlots(){
  slots.length = 0;
  nextSlotIndex = 0;
  $miSlotGrid.innerHTML = '';
  for (let i = 0; i < MAX_SLOTS; i++) addEmptySlot(i); // passa i!
}

// 🔴 POSTERIOR
// 🔴 ANTERIOR
function addEmptySlot(idx){
  const idx = $miSlotGrid.children.length; // ❌ não use esta linha
  const slot = document.createElement('div');

// NOVO
function addEmptySlot(idx){
  const slot = document.createElement('div');
  slot.className = 'mi-slot empty';
  slot.dataset.idx = idx;
  slot.dataset.num = idx + 1;
  // ...
  $miSlotGrid.appendChild(slot);
  slots[idx] = null;
}

// 🔴 POSTERIOR
Com isso, não importa se a função está no começo ou no fim do <script>: o essencial é o carregamento com defer, nenhum erro anterior, e a exposição global via globalThis/window.

Dito por si:
<script defer src="/js/modal-imagem.js"></script> Isso eu não tenho
Dito pelo ChatGPT:

Pensado para 1m 4s
Beleza — se você não tem essa linha

<script defer src="/js/modal-imagem.js"></script>
então há duas formas de carregar o JS do modal. Escolha uma:

Opção 1 — Arquivo externo /public/js/modal-imagem.js (recomendado)
1) Garanta o static do Express
No server.js/app.js:

// 🔴 ANTERIOR
const express = require('express');

// NOVO
const path = require('path');
app.use(express.static(path.join(__dirname, 'public'))); // serve /public

// 🔴 POSTERIOR
// ...suas rotas
2) Inclua o script no layout, perto do </body>
No seu .handlebars de layout (empresa/admin ou equivalente):

<!-- 🔴 ANTERIOR -->
{{!-- ... outros scripts ... --}}

<!-- NOVO -->
<script defer src="/js/modal-imagem.js"></script>

<!-- 🔴 POSTERIOR -->
</body>
3) Crie o arquivo /public/js/modal-imagem.js
Coloque o JS do modal (o que te passei e está no canvas).
Ponto essencial: exponha a função global:

// dentro do arquivo
globalThis.abrirModalImagem = function abrirModalImagem({ produtoId='', descricao='', fornecedor='', departamento='' } = {}){
  // preenche a faixa B (verde)
  $miProdId.value       = String(produtoId || '');
  $miDescricao.value    = String(descricao || '');
  $miFornecedor.value   = String(fornecedor || '');
  $miDepartamento.value = String(departamento || '');

  resetSlots(); // 👉 cria os 7 slots vazios
  carregarBcoImagens({ codigo: produtoId, descricao, fornecedor, departamento });

  $backdrop.classList.add('show');
  $backdrop.setAttribute('aria-hidden','false');
};
Com defer, o JS roda depois do HTML do modal, então $miSlotGrid etc. já existem.

Opção 2 — Script inline (na própria página do modal)
Coloque logo depois do HTML do modal (antes de </body>):

<!-- 🔴 ANTERIOR -->
</div><!-- fim .mi-dialog -->
</div><!-- fim #modalImagem -->

<!-- NOVO -->
<script>
(function(){
  // 👉 cole aqui o mesmo JS do modal que está no canvas
  // (consts de DOM, resetSlots, addEmptySlot, carregarBcoImagens, etc.)

  // deixe a função global
  globalThis.abrirModalImagem = function abrirModalImagem({ produtoId='', descricao='', fornecedor='', departamento='' } = {}){
    $miProdId.value       = String(produtoId || '');
    $miDescricao.value    = String(descricao || '');
    $miFornecedor.value   = String(fornecedor || '');
    $miDepartamento.value = String(departamento || '');
    resetSlots(); // cria 7 slots
    carregarBcoImagens({ codigo: produtoId, descricao, fornecedor, departamento });
    $backdrop.classList.add('show');
    $backdrop.setAttribute('aria-hidden','false');
  };
})();
</script>

<!-- 🔴 POSTERIOR -->
</body>
Chamada do botão
No botão da lista de produtos, use a global:

<!-- 🔴 ANTERIOR -->
<button onclick="abrirModalImagem({ produtoId:'{{_id}}', descricao:'{{descricao}}', fornecedor:'{{fornecedor.razao}}', departamento:'{{departamento}}' })">

<!-- NOVO -->
<button onclick="window.abrirModalImagem({ produtoId:'{{_id}}', descricao:'{{descricao}}', fornecedor:'{{fornecedor.razao}}', departamento:'{{departamento}}' })">

<!-- 🔴 POSTERIOR -->
  Selecionar / Gravar Imagens
</button>
Teste rápido
Depois de carregar a página, abra o Console e rode:

window.abrirModalImagem && window.abrirModalImagem({ produtoId:'teste' })
Se abrir o modal com 7 slots vazios, está ok.
Se não abrir, veja se há algum erro anterior no console (qualquer erro interrompe o script).

Dito por si:
Imagem carregada
Imagem carregada
Me ajuda aí
Dito pelo ChatGPT:

Pensado para 1m 52s
Bora alinhar e fazer funcionar 100%. O problema é combinação de 2 coisas:

O arquivo modal-imagem.js está sendo carregado duas vezes (module + defer) → atrapalha o escopo global.

resetSlots() não está disparando do jeito esperado; vamos garantir a chamada e a criação dos 7 slots.

Abaixo estão patches cirúrgicos com linha anterior e posterior em vermelho.

1) Layout: carregue só uma vez o script do modal
No seu admin-empresa.handlebars (ou layout que está na imagem), deixe apenas o defer e remova o type="module".

<!-- 🔴 ANTERIOR -->
<script type="module" src="/js/modal-imagem.js"></script>

<!-- NOVO -->
<!-- (removido) -->

<!-- 🔴 POSTERIOR -->
<script defer src="/js/modal-imagem.js"></script>
Ter os dois faz o mesmo arquivo rodar 2x e pode “sumir” com a função global.

2) modal-imagem.js: garanta a função global e logs de diagnóstico
Coloque a definição depois das consts de DOM (onde já existem $miProdId, $miDescricao, $miSlotGrid, etc.).

// 🔴 ANTERIOR
const $btnGravar    = document.getElementById('btnGravarImagens');

// NOVO
globalThis.abrirModalImagem = function abrirModalImagem({
  produtoId = '', descricao = '', fornecedor = '', departamento = ''
} = {}) {
  console.log('[abrirModalImagem] IN', { produtoId, descricao, fornecedor, departamento });

  // preenche a faixa B (verde)
  $miProdId.value       = String(produtoId || '');
  $miDescricao.value    = String(descricao || '');
  $miFornecedor.value   = String(fornecedor || '');
  $miDepartamento.value = String(departamento || '');

  // cria 7 slots vazios
  resetSlots();

  // carrega banco (D)
  carregarBcoImagens({ codigo: produtoId, descricao, fornecedor, departamento });

  // exibe modal
  $backdrop.classList.add('show');
  $backdrop.setAttribute('aria-hidden','false');
};

// 🔴 POSTERIOR
function closeModal(){
Teste no console:
window.abrirModalImagem({ produtoId:'teste' }) → deve abrir modal.

3) É o resetSlots() que chama addEmptySlot(i) (7x)
Garanta que está assim (repare no i passado):

// 🔴 ANTERIOR
function resetSlots(){
  slots.length = 0; nextSlotIndex = 0; $miSlotGrid.innerHTML = '';
  for (let i=0; i<MAX_SLOTS; i++) addEmptySlot(); // ❌ sem parâmetro
}

// NOVO
function resetSlots(){
  if (!$miSlotGrid) { console.warn('[slots] #miSlotGrid não encontrado'); return; }
  slots.length = 0;
  nextSlotIndex = 0;
  $miSlotGrid.innerHTML = '';
  for (let i = 0; i < MAX_SLOTS; i++) addEmptySlot(i); // ✅ passa i
  console.log('[resetSlots] criados', MAX_SLOTS, 'slots');
}

// 🔴 POSTERIOR
function firstEmptyIndex(){
4) addEmptySlot(idx) — não recalcule idx lá dentro
// 🔴 ANTERIOR
function addEmptySlot(idx){
  const idx = $miSlotGrid.children.length; // ❌ NÃO usar
  const slot = document.createElement('div');

// NOVO
function addEmptySlot(idx){
  const slot = document.createElement('div');
  slot.className = 'mi-slot empty';
  slot.dataset.idx = idx;
  slot.dataset.num = idx + 1;

  slot.addEventListener('click', () => {
    $hiddenFile.dataset.targetIdx = idx;
    $hiddenFile.value = '';
    $hiddenFile.click();
  });

  const remove = document.createElement('button');
  remove.className = 'mi-remove';
  remove.title = 'Remover';
  remove.textContent = '×';
  remove.addEventListener('click', (ev)=>{ ev.stopPropagation(); clearSlot(idx); });
  slot.appendChild(remove);

  $miSlotGrid.appendChild(slot);
  slots[idx] = null;
}

// 🔴 POSTERIOR
function fillSlotWithImage(idx, src){
5) Limite = 7 e grade 1 linha
// 🔴 ANTERIOR
const MAX_SLOTS = 12;

// NOVO
const MAX_SLOTS = 7;

// 🔴 POSTERIOR
const slots = [];
CSS (se ainda não aplicou):

/* 🔴 ANTERIOR */
.mi-body { flex:1; display:grid; grid-template-rows: 1fr 210px; }

/* NOVO */
.mi-body { flex:1; display:grid; grid-template-rows: 220px 1fr; } /* C menor, D maior */

/* 🔴 POSTERIOR */
/* 🔴 ANTERIOR */
.mi-slot-grid { display:grid; grid-template-columns: repeat(6, minmax(120px,1fr)); gap:12px; }

/* NOVO */
.mi-slot-grid { display:grid; grid-template-columns: repeat(7, minmax(120px,1fr)); gap:12px; }

/* 🔴 POSTERIOR */
6) Clique no banco → próximo slot livre (já aqui)
Dentro do loop que cria cada miniatura do banco:

// 🔴 ANTERIOR
card.appendChild(img);

// NOVO
card.appendChild(img);
card.addEventListener('click', ()=>{
  const idx = firstEmptyIndex();
  if (idx === -1) { alert('Limite de 7 imagens atingido.'); return; }
  slots[idx] = { type: 'bank', url: item.url, key: item.key };
  fillSlotWithImage(idx, item.url);
});

// 🔴 POSTERIOR
$miBankGrid.appendChild(card);
7) Botão que abre o modal (HTML)
Use a global explicitamente:

<!-- 🔴 ANTERIOR -->
<button onclick="abrirModalImagem({ produtoId:'{{_id}}', descricao:'{{descricao}}', fornecedor:'{{fornecedor.razao}}', departamento:'{{departamento}}' })">

<!-- NOVO -->
<button onclick="window.abrirModalImagem({ produtoId:'{{_id}}', descricao:'{{descricao}}', fornecedor:'{{fornecedor.razao}}', departamento:'{{departamento}}' })">

<!-- 🔴 POSTERIOR -->
  Selecionar / Gravar Imagens
</button>
Checklist rápido
 Removido <script type="module" src="/js/modal-imagem.js">

 Mantido apenas <script defer src="/js/modal-imagem.js">

 MAX_SLOTS = 7

 resetSlots() chama addEmptySlot(i)

 addEmptySlot(idx) não recria idx

 Existe <div id="miSlotGrid" class="mi-slot-grid"></div> no HTML do modal

 No console, window.abrirModalImagem({...}) abre o modal e loga [resetSlots] criados 7 slots

Se ainda não aparecerem os 7 boxes, me diga o trecho exato de resetSlots e addEmptySlot que estão no seu arquivo (ou cole as 30 linhas em volta) que eu ajusto na hora.

Dito por si:


<style>
  .CidadeBairro{
    width: 70%;height: 3.2vh;margin: auto;
    margin-left: 6px;margin-top: -15px;
    background-color: #ffffff;
    color: #4e4d4d;
    text-align: center;
  }

  .modal-body .list-group-item {
  padding: 0.75rem 0.5rem;
  transition: background-color 0.2s;
}

.modal-body .list-group-item:hover {
  background-color: #f8f9fa;
}

.btn-sm {
  padding: 2px 8px;
  font-size: 0.8rem;
}

.alinhar-direita {
  text-align: right;
}

.alinhar-center {
  text-align:center;
}

.edit-row {
  background-color: #fff3cd !important; /* amarelo claro */
  border-left: 4px solid #ffc107;
}

.delete-row {
  background-color: #f8d7da !important; /* vermelho claro */
  border-left: 4px solid #dc3545;
}
</style>
<style>
.resultado-similar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px 12px;
  margin-bottom: 6px;
  background-color: #f8f9fa;
  border: 1px solid #dee2e6;
  border-radius: 6px;
  font-size: 0.9rem;
  box-shadow: 1px 1px 3px rgba(0,0,0,0.05);
}

.resultado-similar:hover {
  background-color: #e9ecef;
}

.resultado-similar span {
  flex: 1;
  margin-right: 10px;
  color: #212529;
}

.resultado-similar button {
  padding: 4px 10px;
  background-color: #198754;
  border: none;
  border-radius: 4px;
  color: white;
  cursor: pointer;
  font-size: 0.8rem;
  transition: background-color 0.2s ease;
}

.resultado-similar button:hover {
  background-color: #146c43;
}

</style>
<style>
  .foto-box{
    width: 120px;
    height: 170px;
    display:flex; flex-direction: column;
    align-items:center; justify-content:center;
    background:#ed09e5;
    border: 1px solid #cfd3d7;
    border-radius: 10px;
    padding: 6px;
    box-shadow: 0 2px 6px rgba(0,0,0,.15);
    aspect-ratio: 1 / 1;     /* quadradinho perfeito */
    overflow: hidden;
  }


.fotos-wrapper{
  min-height: 150px;            /* agora visível */
  background: #094b2f;          /* seu verde escuro */
  border-radius: 6px;
  padding: 10px;
  display: flex;
  flex-wrap: wrap;        /* <- importante p/ notebook */
  gap: 10px;
  align-content: flex-start;
}

.foto-box img{
  width: 100px; height: 100px;
  object-fit: contain;
  border:transparent; cursor: pointer;
  background-color: #fff;
  padding: 8px;
  border-radius: 8px;
  /* observar */
  max-width: 100%;
  max-height: 100%;
}

#select_departamento {
  background-color: #04bb32;
  color: white;
  font-weight: bold;
  border-radius: 4px;
  padding: 5px;
}
</style>
{{!-- *modal vinculo  */ --}}
<style>

.modal-dialog {
  max-height: 90vh;
  margin-top: 2vh;
}

.option-roxa{
   background-color: #2b0a26;
   color:#ffffff;
}

.openModal{
    display:none;
    position:fixed;
    top:0; left:0;
    width:100%; height:100%;
    background:#00000080;
    justify-content:center;
    align-items:flex-start;   /* cola no topo em notebook */
    padding-top:30px;         /* respiro no topo */
    z-index:9999;
  }

  #botaoGravar{
    width: 90%;
    height: 40px;
  }
</style>
<style>
  /* empilhar cabeçalhos no notebook */
  @media (max-width: 1366px){    }
</style>
{{!-- ///////////////////////////////////////////////////////////////////////////////////////////// --}}
<style>
#modalImagem.backdrop {
position: fixed;
inset: 0;
background: rgba(0,0,0,.55);
display: none; /* controlado por .show */
z-index: 1500;
}
#modalImagem.backdrop.show { display: block; }


#modalImagem .mi-dialog {
    position: absolute;
    right: 2vw; /* encostado à direita, como o usuário costuma preferir */
    top: 4vh;
    width: min(96vw, 1180px);
    height: 92vh;
    background: #f10505;
    color: #fff;
    border-radius: 16px;
    box-shadow: 0 12px 40px rgba(0,0,0,.6);
    overflow: hidden; /* barra interna por seção */
    display: flex;
    flex-direction: column;
}


/* ====== Cabeçalho (A) ====== */
.mi-header {
background: #8d0037; /* vinho */
padding: 14px 18px 10px;
display: grid;
grid-template-columns: auto 1fr auto;
gap: 12px;
align-items: center;
border-bottom: 2px solid #330018;
}
.mi-title {
font-size: 20px;
font-weight: 700;
letter-spacing: .3px;
white-space: nowrap;
}
.mi-actions { display: flex; gap: 10px; align-items: center; }
.mi-btn {
border: 0; outline: 0; cursor: pointer;
padding: 8px 12px; border-radius: 10px;
background: #1976d2; color: #fff; font-weight: 600;
}
.mi-btn:hover { filter: brightness(1.05); }
.mi-btn.flat { background: #3949ab; }
.mi-btn.danger { background: #b71c1c; }
.mi-close {
background: #111; color: #fff; border: 1px solid #333; border-radius: 12px;
font-weight: 800; width: 36px; height: 36px; display: grid; place-items: center; cursor: pointer;
}
.mi-close:hover { background: #222; }


/* ====== Linha de Informações (B) ====== */
.mi-info {
background: #19a204; /* verde vivo */
padding: 10px 12px;
border-bottom: 2px solid #0c5102;
}
.mi-grid {
display: grid;
grid-template-columns: 1.1fr 1.6fr 1.4fr 1.1fr;
gap: 10px;
}
.mi-field { display: grid; gap: 4px; font-size: 12px; color: #122; }
.mi-field label { font-weight: 700; color: #032d02; }
.mi-field input {
height: 34px; border: 0; border-radius: 8px;
padding: 0 10px; outline: none; background: #fff; color: #000;
}
.mi-field input[readonly] { background: #f3f6f9; }


/* ====== Corpo (C + D) ====== */

//.mi-body { flex: 1; display: grid; grid-template-rows: 220px 1fr; }  /* C ≈ 220px, D ocupa o resto */
.mi-body { flex:1; display:grid; grid-template-rows: 220px 1fr; } 

/* ====== Seção C: Slots de fotos ====== */
.mi-slots {
background: #ffe606; /* amarelo */
padding: 14px 14px 8px;
overflow: hidden;

}

.mi-slots-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 8px; }
.mi-slots-title { color: #1a1a1a; font-weight: 800; }
.mi-nobank{
  margin:8px 0 0;
  background:rgba(176,0,32,.12);
  border:1px dashed #b00020;
  color:#2b0008;
  font-weight:800;
  padding:8px 10px;
  border-radius:10px;
}
.mi-slot-grid {
   display: grid; grid-template-columns: repeat(7, minmax(120px,1fr));
   gap: 12px; align-items: stretch;
}
.mi-slot {
background: #ff00b9; /* magenta */
border-radius: 14px; position: relative; overflow: hidden; cursor: pointer;
display: grid; place-items: center; min-height: 150px; border: 4px solid #ffe606;
}

.mi-slot::before{
  content: attr(data-num);
  position: absolute; top: 6px; left: 10px;
  font-weight: 900; font-size: 18px;
  color: #8d0037; text-shadow: 0 1px 0 #fff;
}

.mi-slot img { width: 100%; height: 100%; object-fit: cover; display: block; }

.mi-slot.empty::after {
content: "Clique aqui para pegar a foto no computador";
color: #fff; font-weight: 800; text-align: center; padding: 10px; line-height: 1.1;
}
.mi-slot .mi-remove {
    position: absolute; top: 6px; right: 6px; width: 26px; height: 26px; border-radius: 50%;
    display: none; place-items: center; background: rgba(0,0,0,.65); color: #fff; font-size: 14px; cursor: pointer;
}
.mi-slot.filled .mi-remove { display: grid; }


/* ====== Barra de ações (slots) ====== */
.mi-toolbar { display: flex; gap: 10px; }


/* ====== Seção D: Banco de Imagens ====== */
.mi-bank {
      background: #7da56b; /* verde musgo claro do mock */
      border-top: 6px solid #8d0037; /* contorno vinho */
      padding: 10px 12px 12px;
      overflow: auto;
}
.mi-bank-title { font-weight: 800; color: #1b000a; margin-bottom: 8px; }
.mi-bank-grid { display: grid; grid-template-columns: repeat(12, 1fr); gap: 10px; }
.mi-thumb {
    aspect-ratio: 1/1; background: #f2f2f2; border-radius: 10px; overflow: hidden; border: 3px solid #7b002e; cursor: pointer;
    display: grid; place-items: center;
}
.mi-thumb img { width: 100%; height: 100%; object-fit: cover; display: block; }
.mi-empty-msg { opacity: .85; font-weight: 600; }


/* ====== Rodapé (gravar) ====== */
.mi-footer {
padding: 10px 12px; background: #0b100f; border-top: 1px solid #0f1a19; display: flex; justify-content: flex-end; gap: 10px;
}
</style>

<script>
  window.todosSetoresSecoes = {{{todosSetoresSecoes}}}
</script>
<div id="menuLateral" class="lateral">
  <div id="menulista" style="width: 10vw; height: 92vh; background-color:#fff; display: flex; flex-direction: column; justify-content: space-around; transition: margin-left 0.4s ease;">
    <!-- Conteúdo do menu -->
    <div style="height: 25vh;background-color:#fff;"></div>
    <div style="display: flex; flex-direction: column; justify-content: space-around;background-color:transparent;text-align: left;margin: auto;">
      <a id="passa-cadastrofornec" href="">Cadastro fornecedor</a>
      <div style="height: 1vh;"></div>
      <div>
      <a id="passa-listafornec" href="/fornec/listafornec/:{{this._id}}">Lista fornecedor</a>
      </div>
    </div>
    <div style="height: 25vh;"></div>
  </div>

  <div id="faixaVertical" style="width: 2vw; height: 92.5vh; background-color: #295ee4; display: flex; flex-direction: column; justify-content: space-around; z-index: 800;">
    <h2 id="H2menuLateral" style="font-size: 1vw; text-align: end; color: #fff;">Menu lateral</h2>
  </div>
</div>  
<div id="modalInfoSetorSecao" style="display:none; position:absolute; z-index:500;
     background:#fff; border:1px solid #ccc; padding:10px; border-radius:6px;
     box-shadow: 0 0 8px rgba(0,0,0,0.2); max-width: 250px; font-size: 14px;">
  <div id="modalContentSetorSecao"></div>
</div> 
<div id="painelLista" class="grade" >
        <div style="display: flex;flex-direction: row;justify-content: center;">
           <h1 style="font-weight:200;font-size:medium ;color: red;">Relação de produtos</h1>
        </div>
        <div id="CadastrarProduto" style="width: 98vw;height: 3vh;margin: auto;display: flex;flex-direction: row;justify-content: center;background-color: #295ee4;">
          <button id="abrirModalProduto" style="border: none;background-color: transparent;" data-bs-toggle="modal" data-bs-target="#CadastrarProdutosModal" data-lojista="{{lojista._id}}" class="btn btn-sm" onclick="openCadastroModal()">
            <h1 style="font-weight:200;color:#fff;font-size: small;">Cadastro de produtos</h1>
            {{!-- <input id="lojaFornec" type="text" style="display:block;" value="{{loja._id}}"> --}}
          </button>
        </div>
        <div id="divTable" style="overflow-x: auto;width:100%;">
          <table id="tabelaProdutos" class="table  table-bordered">
            
            <thead style="color: #df061f;">
              <tr >
                <th style="width: 1vw;" onclick="ordenarTabela(0)">Itens</th>
                <th style="display: none;" >Id</th>
                <th onclick="ordenarTabela(2)">Código</th>
                <th onclick="ordenarTabela(3)">Descrição</th>
                <th onclick="ordenarTabela(4)">Complemento</th>
                <th onclick="ordenarTabela(5)">Refer</th>
                <th onclick="ordenarTabela(6)">Fornecedor</th>
                <th onclick="ordenarTabela(7)">Segmento</th>
                {{!-- <th onclick="ordenarTabela(7)">Setor</th>
                <th onclick="ordenarTabela(7)">Seção</th> --}}
                <th onclick="ordenarTabela(8)">Qte</th>
                <th onclick="ordenarTabela(9)">Custo</th>
                <th onclick="ordenarTabela(10)">Vista</th>
                <th onclick="ordenarTabela(11)">Prazo</th>
                <th >Ações</th>
              </tr>
            </thead>
            <tbody id="produtoTable">
              {{#each produtos}}
              <tr data-id="{{_id}}">
                <td class="alinhar-center">{{inc @index}}</td>
                <td style="display: none">{{_id}}</td>
                <td>{{codigo}}</td>
                <td>{{descricao}}</td>
                <td>{{complete}}</td>
                <td>{{referencia}}</td>
                <td>{{fornecedor.razao}}</td>
                <td>
                   {{#each localloja}}
                      {{#each departamento}}
                        <span class="departamento-click" data-index="{{@../index}}" style="font-weight: bold;color:red;">
                          {{nomeDepartamento}}
                        </span>
                      {{/each}}
                    {{/each}}
                </td>
                <td class="alinhar-center">{{qte}}</td>
                <td class="alinhar-direita">{{formatarDecimal precocusto}}</td>
                <td class="alinhar-direita">{{formatarDecimal precovista}}</td>
                <td class="alinhar-direita">{{formatarDecimal precoprazo}}</td>
                <td>
                  <div style="display: flex;flex-direction: row;justify-content:space-around;gap: 4px; flex-wrap: wrap;background-color:transparent;">
                    <select 
                            class="form-select form-select-sm" 
                            onchange="executarAcaoComDataset(this)" 
                            data-id="{{_id}}" 
                            data-descricao="{{descricao}}" 
                            data-fornecedor="{{fornecedor.razao}}"
                            data-departamento ="{{localloja.[0].departamento.[0].nomeDepartamento}}">
                      <option value="" selected disabled>⋮</option>
                      <option value="vincular">🔗 Vincular</option>
                      <option value="imagens">🖼️ Imagens</option>
                      <option  value="editar">✏️ Editar</option>
                      <option  value="deletar">🗑️ Deletar</option>
                    </select>
                    {{!-- // data-codigo="{{codigo}}"  --}}
                  </div>
                </td>
              </tr>
              {{/each}}
            </tbody>
          </table>
        </div>  
</div>
<!-- Modal para edição -->
<div id="editModal"
  style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:rgba(0,0,0,0.5); justify-content:center; align-items:center; z-index:9999;">
  <div
    style="background:#fff; width:50%; height:auto; padding:20px; border-radius:10px; box-shadow:0 5px 10px rgba(0,0,0,0.5);">
    <h4>Editar Produto ??</h4>
    <form id="editForm">
      {{!-- <input type="text" id="editId" value=""> --}}
      <div style="margin-bottom:10px;" >
        <label>Id:</label>
        <label type="text" id="editId" name="editid" class="form-control" style="background-color: rgb(223, 138, 11);color:#121010"></label>
      </div>
      <div style="margin-bottom:10px;" >
        <label>Código:</label>
        <input type="text" id="editCodigo" name="codigo" class="form-control" style="background-color: yellow;color:#110b0b">
      </div>
      <div style="margin-bottom:10px;" >
        <label>Descrição:</label>
        <input type="text" id="editDescricao" name="descricao" class="form-control">
      </div>
       <div style="margin-bottom:10px;" >
        <label>Complemento:</label>
        <input type="text" id="editComplemento" name="complemento" class="form-control">
      </div>
      <div style="margin-bottom:10px;">
        <label>Refer:</label>
        <input type="text" id="editRefer" name="refer" class="form-control">
      </div>
       <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
            <label style="background-color:transparent;width: 85px;padding: 5px;color:#110b0b">Fornecedor:</label>
            <select id="editFornec" name="fornecedor" style="height: 3.2vh;width:70%;margin: auto;margin-left: 6px;margin-top: 3px;">
              <option value="">Selecione:</option>
                {{#each f}}
                   <option value="{{_id}}">{{razao}} - {{marca}}</option>
                {{/each}}
        </select>
        
        {{!-- <input type="text" id="editFornec" name="fornec" class="form-control"> --}}
      </div>
      <div style="margin-bottom:10px;">
        <label>Quantidade:</label>
        <input type="number" id="editQte" name="qte" class="form-control">
      </div>
      <div style="margin-bottom:10px;">
        <label>Preço Custo:</label>
        <input type="number" step="any" id="editPrecoCusto" name="precocusto" class="form-control">
      </div>
      <div style="margin-bottom:10px;">
        <label>Preço Vista:</label>
        <input type="number" step="any" id="editPrecoVista" name="precovista" class="form-control">
      </div>
      <div style="margin-bottom:10px;">
        <label>Preço Prazo:</label>
        <input type="number" step="any" id="editPrecoPrazo" name="precoprazo" class="form-control">
      </div>
      <button type="button" class="btn btn-secondary" onclick="closeEditModal()">Cancelar</button>
      <button type="submit" class="btn btn-primary">Salvar</button>
    </form>
  </div>
</div>
<!-- Modal para cadastro -->
<div   id="cadastroProdutoModal" class="openModal">
  <div
    style="background:#959292; width:50%; height:97vh; padding:20px; border-radius:10px; box-shadow:0 5px 10px #00000080;position: relative;margin: auto;">
    <button type="button" id="fecharForm" style="position: absolute;top: 5px;right: 5px;border: none;background: transparent;font-size: 30px;cursor: pointer;" onclick="closeCadastroModal()">&times;</button>
    <div style="width: 98%;height: 92vh;margin: auto;background-color: #0b2f83;overflow: scroll;margin-top: 2.5vh;padding: 5px;">
    <h4 style="font-weight: 200;color: #ffffff;">Cadastro de produto</h4>
          <form id="cadastroProdutoForm" style="background-color: #295ee4;color:#fff;position: relative;height: 96vh;" >
            <input id="IddoLojista" type="text" name="loja_id" value="{{lojista._id}}" style="background-color: #df061f;display:block;">
             <div style="margin-bottom:10px;display: block;">
              <label style="color:white">Marca loja:</label>
              <label id="cadastroMarca" type="text"  name="marca" class="form-control" style="background-color: yellow;" >{{lojista.marca}}</label>
            </div>
            <div style="margin-bottom:10px;background-color blueviolet;">
              <label>Código:</label>
              <input id="cadastroCodigo" type="text"  name="codigo" class="form-control" tabindex="0">
            </div>
           
            <div style="margin-bottom:10px;">
              <label>Descrição:</label>
              <input id="cadastroDescricao" type="text"  name="descricao" class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Complemento:</label>
              <input id="cadastroComplemento" type="text"  name="complemento" class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Referência:</label>
              <input id="cadastroReferencia" type="text"  name="referencia" class="form-control">
            </div>
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
              <label style="background-color: #df061f;width: 85px;padding: 5px;">Fornecedor:</label>
              <select id="selectFornecedores" name="fornecedores" style="height: 3.2vh;width:70%;margin: auto;margin-left: 6px;margin-top: 3px;">
                       <option value="">Selecione:</option>
                          {{#each f}}
                            <option value="{{_id}}">{{marca}}</option>
                          {{/each}}
              </select>
            </div>
            {{!-- Os nomes cidade e bairro constam  na ficha do produto para facilitar a consulta --}}
            <div style="background-color:transparent;margin-bottom: 12px;margin-top: 6px;display: none;">
              <label id="cadastroCidade" style="background-color: #df061f;width: 85px;padding: 5px;">Cidade:</label>
              <label id="cadastroBairro" class="CidadeBairro" style="margin-top: -6px;padding-top: 0px;">{{lojista.cidade}}</label>
            </div>
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;display: none;">
              <label style="background-color: #df061f;width: 85px;padding: 5px;">Bairro:</label>
              <label class="CidadeBairro">{{lojista.bairro}}</label>
            </div>
            <div style="margin-bottom:10px;">
              <label>Quantidade:</label>
              <input id="cadastroQte" type="number"  name="qte" class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Preço Custo:</label>
              <input id="cadastroPrecoCusto" type="number" name="precocusto" step="0.01" min="0" lang="pt-BR"   class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Preço Vista:</label>
              <input id="cadastroPrecoVista" type="number" name="precovista" step="0.01" min="0" lang="pt-BR"   class="form-control">
            </div>
            <div style="margin-bottom:10px;">
              <label>Preço Prazo:</label>
              <input id="cadastroPrecoPrazo" type="number" name="precoprazo" step="0.01" min="0" lang="pt-BR"   class="form-control">
            </div>
            {{!-- ========================================================================== --}}
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
                <label style="background-color: #df061f;width: 150px;padding: 5px;">Departamento:</label>
                <select id="select_departamento" name="select_departamento" style="height: 3.2vh; width: 70%; margin-left: 6px; margin-top: 3px;">
                      <option value="" style="background-color: #295ee4;color:#fff">Selecione o departamento:</option>
                </select>
            </div>
            {{!-- ========================================================================== --}}
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
                <label for="setor" style="background-color: #df061f;width: 150px;padding: 5px;">Setor:</label>
                
                <select id="selectSetor" name="setor" style="height: 3.2vh; width: 70%; margin-left: 6px; margin-top: 3px;">
                      <option value="" style="color:black">Selecione o setor:</option>
                </select>
             
            </div>
            {{!-- ========================================================================== --}}
            <div style="margin-bottom:10px;background-color:transparent;margin-bottom: 6px;">
              <label for="divSelect" style="background-color: #df061f;width: 150px;padding: 5px;">Seção:</label>
              {{!-- <div id="divSelect" style=""> --}}
                <select id="selectSecao" name="secao" style="height: 3.2vh; width: 70%; margin-left: 6px; margin-top: 3px;">
                      <option value="" style="color:black">Selecione a seção:</option>
                </select>
              {{!-- </div> --}}
            </div>
            {{!-- ========================================================================== --}}
            <div style="display: flex;flex-direction: row;justify-content:space-around;justify-items: center;padding: o 10px 0 10px;margin-bottom: 10px;">
                <button type="button" class="btn btn-secondary" onclick="closeCadastroModal()">Cancelar</button>
                <button id="btnSalvar" type="submit" class="btn btn-primary">Salvar</button>
            </div>
          </form>
    </div>
  </div>
</div>
<!-- Modal Produto -->
<div id="modalProdutoVinculo" class="modal fade"  tabindex="-1">
   <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Produto ?</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body" id="conteudoModalProduto">
        <!-- Conteúdo preenchido dinamicamente via JS -->
      </div>
      <div class="modal-footer">
        <button class="btn btn-primary btn-sm" style="background-color:#02662d;color:#ffffff" onclick="abrirModalBuscaSimilar('{{_id}}')">+ vincular</button>
      </div>
    </div>
  </div>
</div>
{{!-- Busca Similares --}}
<div id="areaBuscaSimilar" style="display:none; padding: 10px;">
  <h6>Buscar Similar para Vincular</h6>
  <input type="text" id="buscaSimilarInput1" placeholder="Buscar similar por código ou nome" class="form-control" onkeyup="buscarSimilares(baseId)">
  <div id="resultadosSimilar1" style="margin-top:10px;"></div>
</div>
<!-- SEGUNDO BLOCO -->
<div id="modalVinculo" class="modal fade"  tabindex="-1">
  <div class="modal-dialog modal-dialog-centered">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Buscar Similar para Vincular</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body">
        <input id="buscaSimilarInput2" type="text" class="form-control" style="background-color: #ffffff;color: #100e0e;" placeholder="Buscar similar por código ou nome" oninput="buscarSimilar()">
        <div id="resultadosSimilar2" class="mt-3"></div>
      </div>
    </div>
  </div>
</div>
<!-- MODAL Upload de Imagens -->
<div id="modalImagem" class="backdrop" role="dialog" aria-modal="true" aria-hidden="true">
      <div class="mi-dialog">
            <!-- A: Cabeçalho -->
            <div class="mi-header">
                <button id="miClose" class="mi-close" title="Fechar">×</button>
                <div class="mi-title">Tratando da imagem</div>
                <div class="mi-actions">
                <button id="miReloadBank" class="mi-btn flat" title="Recarregar banco de imagens">Recarregar Bco IMG</button>
                </div>
            </div>
            <!-- B: Linha de informações do produto -->
            <div class="mi-info">
                <div class="mi-grid">
                    <div class="mi-field">
                      <label>id-produto</label>
                      <input id="miProdId" type="text" readonly>
                    </div>
                    <div class="mi-field">
                      <label>descrição</label>
                      <input id="miDescricao" type="text" readonly>
                    </div>
                    <div class="mi-field">
                      <label>fornecedor</label>
                      <input id="miFornecedor" type="text" readonly>
                    </div>
                    <div class="mi-field">
                      <label>departamento</label>
                      <input id="miDepartamento" type="text" readonly>
                    </div>
                </div>
            </div>
            <!-- Corpo: C (slots) + D (banco) -->
            <div class="mi-body">
                <!-- C: Slots de fotos -->
                <section class="mi-slots">
                  <div class="mi-slots-header">
                        <div class="mi-slots-title">Seleção e Gravar Imagens</div>
                        <div class="mi-toolbar">
                          <button id="miClearAll" class="mi-btn danger">Limpar seleção</button>
                        </div>
                  </div>
                  <div id="miSlotGrid" class="mi-slot-grid" style="background:#02662d ;"></div>
                  <div id="miNoBankBanner" class="mi-nobank" style="display:none">
                          Não há imagens no banco. Clique nas caixas acima para escolher do seu computador.
                  </div>
                  
                </section>
                <!-- D: Banco de imagens -->
                <section class="mi-bank">
                    <div class="mi-bank-title">banco de imagens</div>
                    <div id="imgbcoImg" name="imgbcoImg" class="mi-bank-grid"></div>
                    <div id="miBankEmpty" class="mi-empty-msg" style="display:none">
                        Não há imagens.
                    </div>
                </section>
            </div>
            <div class="mi-footer">
                <button id="btnGravarImagens" class="mi-btn">Gravar imagens</button>
            </div>
      </div>
</div>
<input id="miHiddenFile" type="file" accept="image/*" style="display:none" />

{{!-- <><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><> --}}
{{!-- MOSTRANDO E ESCONDENDO MENU LATERAL --}}
<script>
      const faixa = document.getElementById("faixaVertical");
      const menulista = document.getElementById("menulista");

      faixa.addEventListener("click", function () {
        const currentMargin = parseFloat(window.getComputedStyle(menulista).marginLeft);
        const vwToPx = vw => (vw * window.innerWidth) / 100;

        const abertoPX = 0;
        const fechadoPX = -vwToPx(10); // Agora -13vw

        if (Math.abs(currentMargin - fechadoPX) <= 1) {
          menulista.style.marginLeft = '0vw'; // Abre
        } else {
          menulista.style.marginLeft = '-10vw'; // Fecha
        }
      });
</script>
{{!-- PEGA ID LOJISTA PARA LINK FORNEC CADASTRO --}}
<script>
  function pegaIdlojista(){
    //console.log(' [ 377 pegaIdlojista]')
    let n=document.getElementById("IddoLojista");
    const link = document.getElementById("passa-cadastrofornec");
    // Atualiza o href corretamente:
    let lojistaId=n.value;
    link.href = /fornec/cadastro/${lojistaId};
     const link1 = document.getElementById("passa-listafornec");
    // Atualiza o href corretamente:
    link1.href = /fornec/listafornec/${lojistaId};
  }

   pegaIdlojista()
</script>
{{!-- ORDENAÇÃO DE COLUNS --}}
<script>
let direcaoOrdenacao = [];

function ordenarTabela(colunaIndex) {
  const tabela = document.getElementById("tabelaProdutos");
  const tbody = tabela.tBodies[0];
  const linhas = Array.from(tbody.rows);

  // Alternar direção
  direcaoOrdenacao[colunaIndex] = !direcaoOrdenacao[colunaIndex];
  const crescente = direcaoOrdenacao[colunaIndex];

  linhas.sort((a, b) => {
    const valA = a.cells[colunaIndex].innerText.trim();
    const valB = b.cells[colunaIndex].innerText.trim();

    const numA = parseFloat(valA.replace(",", "."));
    const numB = parseFloat(valB.replace(",", "."));
    const ambosNumeros = !isNaN(numA) && !isNaN(numB);

    if (ambosNumeros) {
      return crescente ? numA - numB : numB - numA;
    } else {
      return crescente
        ? valA.localeCompare(valB)
        : valB.localeCompare(valA);
    }
  });

  linhas.forEach(row => tbody.appendChild(row));
}
</script>
{{!-- buscaSimilarInput2 --}}
<script>
window.addEventListener("DOMContentLoaded", () => {
  const inputBuscar = document.getElementById("buscaSimilarInput2");

  if (!inputBuscar) return;

  inputBuscar.addEventListener("input", async (e) => {
    console.log(' [ 617 produtos .handlebars]')
    const termo = e.target.value.trim();
    if (termo.length < 2 || !produtoIdBaseSelecionado) return;

    try {
      const resposta = await fetch(/simiproduto/buscar?termo=${encodeURIComponent(termo)}&baseId=${produtoIdBaseSelecionado});
      const similares = await resposta.json();

      const lista = document.getElementById("resultadosSimilar2");
      lista.innerHTML = "";

      if (!similares.length) {
        lista.innerHTML = '<div class="text-muted">Nenhum resultado encontrado</div>';
        return;
      }

      similares.forEach(sim => {
        const li = document.createElement("li");
        li.className = "list-group-item d-flex justify-content-between align-items-center";
        li.innerHTML = 
          <div>
            <strong>${sim.codigo}</strong> - ${sim.descricao} (R$ ${parseFloat(sim.precovista?.$numberDecimal || '0').toFixed(2)})
          </div>
          <button class="btn btn-sm btn-success" onclick="vincularSimilar('${produtoIdBaseSelecionado}', '${sim._id}')">Vincular</button>
        ;
        lista.appendChild(li);
      });
    } catch (err) {
      console.error("Erro na busca de similares:", err);
    }
  });
});
</script>
{{!-- executarAcao(acao, id, codigo, descricao,fornecedor) --}}
<script>
  function executarAcao(acao, id, descricao,fornecedor,departamento) {
        const row = document.querySelector([data-id='${id}']);
        const tableRows = document.querySelectorAll("tr");

        // limpa os destaques anteriores
        tableRows.forEach(r => r.classList.remove("edit-row", "delete-row"));
        console.log('');
     //   console.log(' [ 765 ] -Id => ',id,' descricao =>  ',descricao,' fornecedor=>   ',fornecedor,' departamento =>  ', departamento)
     //   console.log('------------------------------------------------------');
     //   console.log('');
        const produtoId=id;
        const departamentoNome=departamento;
        switch (acao) {
          case "vincular":
            console.log(' [ 479 ] executarAcao',id)
            abrirModalVinculoProduto(id);
            break;
          case "imagens":
            abrirModalImagens(descricao,fornecedor,{produtoId,departamentoNome});
            break;
          case "editar":
            row?.classList.add("edit-row");
            openEditModal(id);
            break;
          case "deletar":
            row?.classList.add("delete-row");
            deleteProduct(id);
            break;
        }
  }

  //abrirModalImagens para selecionar a imaagem a ser gravada
  function abrirModalImagens(descricao,fornecedor,{ produtoId, departamentoNome }) {
    console.log('',' 0 ', produtoId,' 1 ', descricao,' 3 ',fornecedor,' 4 ',departamentoNome);
    document.getElementById("miProdId").value=produtoId;
    document.getElementById("miDescricao").value=descricao;
    document.getElementById("miFornecedor").value=fornecedor;
    document.getElementById("miDepartamento").value=departamentoNome;
    document.getElementById("modalImagem").style.display = "block";
    const campo=descricao;
    BuscarProdutoImagem(campo);

  }
</script>
{{!-- criardivsfotos --}}
<script>
  function criardivsfotos() {
    acertou();
  }

  function acertou() {
  //const qte = parseInt(document.getElementById("qteFotos").value || "0", 10);
  //const container = document.getElementById("fotosContainer");
  //container.innerHTML = "";

  //for (let i = 0; i < qte; i++) {
  //  const box = document.createElement("div");
  //  box.className = "foto-box";

  //  const img = document.createElement("img");
  //  img.src = "/images/revistalogo.png";

  //  const input = document.createElement("input");
  //  input.type = "file";
  //  input.id = uploadImg${i};
  //  input.accept = "image/*";
  //  input.style.display = "none";

  //  img.addEventListener("click", () => input.click());
  //  input.addEventListener("change", () => {
  //    if (input.files[0]) img.src = URL.createObjectURL(input.files[0]);
  //  });

  //  box.appendChild(img);
  //  box.appendChild(input);
  //  container.appendChild(box);
  }

  // Garante um ÚNICO listener no botão
  //const btn = document.getElementById("botaoGravar");
  //btn.onclick = async () => {
  // const codigoId     = document.getElementById("codigoimg").value;
  // const produtoNome  = document.getElementById("descricaoimg").value;
  //  const fornecedor   = document.getElementById("fornecimg").value;
  //  const departamento = document.getElementById("deptoimg").value;

  //  const MAX_MB = 2;
  //  const inputs = container.querySelectorAll('input[type="file"]');
  //  let enviados = 0;

  //  for (let i = 0; i < inputs.length; i++) {
  //    const input = inputs[i];
  //    const file = input.files?.[0];
  //    if (!file) continue;

  //    if (file.size > MAX_MB * 1024 * 1024) {
  //      alert(Arquivo ${i + 1} excede ${MAX_MB} MB. Pulei este.);
  //      continue;
  //    }

  //    const ordem = String(i + 1).padStart(2, "0");
  //    const qs = new URLSearchParams({
  //      filename: file.name,
  // /     filetype: file.type,
  //      ordem
   //   });

 //     const r = await fetch(/gravafoto/getpresignedurl?${qs.toString()});
 //     const { uploadUrl, key } = await r.json();

 //     const up = await fetch(uploadUrl, {
 //       method: "PUT",
 //      body: file,
 //       headers: { "Content-Type": file.type, "x-amz-acl": "public-read" }
 //     });
 //     if (!up.ok) { alert(Falha ao enviar a imagem ${i + 1}.); continue; }

 //     const publicUrl = uploadUrl.split("?")[0];
 //     await fetch("/gravafoto/imagem/salvar", {
 //       method: "POST",
 //       headers: { "Content-Type": "application/json" },
 //       body: JSON.stringify({
 //         codigoId,
 //         produtoNome,
 //         fornecedor,
 //         departamento,
 //         imagemUrl: publicUrl,
 // /        shortkey: String(key || "").substring(0,16),
 //         mimeType: file.type,
 //         size: file.size
 //       })
 //     });
 //     enviados++;
 //   }

 //   alert(enviados > 0 ? ${enviados} imagem(ns) enviada(s) com sucesso. : "Nenhuma imagem selecionada.");

    // mantenho aberto (útil pra enviar mais); feche se quiser:
 //    fecharModalUpload();
 // };
//}
</script>


{{!-- openCadastroModal --}}
<script>
  function openCadastroModal(){
      document.getElementById("cadastroProdutoModal").style.display="block";
  }  
</script>
{{!-- BUSCAR FORNECEDORES QUANDO O INPUTCODIGO TIVER FOCO --}}
<script>
  let fornecedoresCarregados = false;

  document.addEventListener("DOMContentLoaded", () => {
    const inputCodigo = document.getElementById("cadastroCodigo");
    let lojistaId=document.getElementById("IddoLojista").value;

    if (inputCodigo) {
      inputCodigo.addEventListener("focus", async () => {
        if (!fornecedoresCarregados) {
          try {
            const response = await fetch(/fornec/fornecqlojista/${lojistaId});
            const lista = await response.json();
            console.log('[ 912 ]');
            console.log('',lista);
            console.log('');
            const select = document.getElementById("selectFornecedores");

            select.innerHTML = '<option disabled selected>Selecione um fornecedor</option>';

            lista.forEach(dep => {
              const opt = document.createElement("option");
              opt.value = dep._id;
              opt.textContent = dep.marca;
              select.appendChild(opt);
            });

            fornecedoresCarregados = true; // para não buscar de novo
          } catch (err) {
            console.error("Erro ao buscar fornecedores:", err);
          }
        }
      });
    }
  });
</script>
 {{!-- BUSCAR OS DEPARTAMENTOS QUANDO O INPUTCODIGO ADQUIRIR FOCO --}}
<script>
  let departamentosCarregados = false;

  document.addEventListener("DOMContentLoaded", () => {
    const inputCodigo = document.getElementById("cadastroDescricao");
    let idLoja=document.getElementById("IddoLojista").value;
    
   // console.log(' [ 944 document.addEventListener("DOMContentLoaded",() ]',idLoja);
   // console.log('');
   // console.log(' IdLoja ',idLoja)
   // console.log('');
    if (inputCodigo) {
      inputCodigo.addEventListener("focus", async () => {
       // console.log("[ 951 ] Focus Código ")
        if (!departamentosCarregados) {
          try {
            console.log('');
            console.log('',idLoja);
            console.log('');
            const response = await fetch(/produto/lojistadepartamentos/${idLoja});
            const departamentos = await response.json();
            console.log(' [ 1089 ]');
            console.log('',departamentos);
            console.log('');
            const select = document.getElementById("select_departamento");

            // Limpa o <select> antes de preencher
           // select.innerHTML = '<option disabled selected>Selecione um departamento</option>';
            select.style.backgroundColor="#100e0e";
            select.style.backgroundColor="red";  
            select.style.color="#100e0e";
            select.style.color="pink";
            // Preenche o select com os dados recebidos
            departamentos.forEach(dep => {
              const opt = document.createElement("option");
              opt.value = dep._id;
              opt.textContent = dep.nomeDepartamento;
              opt.classList.add("option-roxa");
              select.appendChild(opt);
            });

            select.style.backgroundColor="black";
            select.style.color="red";

            departamentosCarregados = true;
          } catch (err) {
            console.error("Erro ao carregar departamentos:", err);
          }
        }
      });
    }
  });
</script>
{{!-- select_departamento + selectSetor --}}
<script>
document.getElementById('select_departamento').addEventListener('change', async function () {
  const departamentoId = this.value;

  const setorSelect = document.getElementById('selectSetor');
  setorSelect.innerHTML = '<option value="">Carregando setores...</option>';

  if (departamentoId) {
    try {
      console.log('-----------------');
      console.log(' [ 995 ]');
      console.log('-----------------');
      const response = await fetch(/segmento/setores/${departamentoId});
      const setores = await response.json();
      console.log(' setores ==>',setores)
      if (Array.isArray(setores)) {
        setorSelect.innerHTML = '<option value="">Selecione o setor:</option>';
        setores.forEach(setor => {
          const opt = document.createElement('option');
          opt.value = setor._id;
          opt.textContent = setor.nomeDeptoSetor;
          opt.classList.add("option-roxa");
          setorSelect.appendChild(opt);

          setorSelect.style.backgroundColor="blue";
          setorSelect.style.color="red";
        });
      } else {
        setorSelect.innerHTML = '<option value="">Nenhum setor encontrado.</option>';
      }
    } catch (err) {
      setorSelect.innerHTML = '<option value="">Erro ao buscar setores</option>';
      console.error(err);
    }
  } else {
    setorSelect.innerHTML = '<option value="">Selecione o setor:</option>';
  }
});
document.getElementById('selectSetor').addEventListener('change', async function () {
  const setorId = this.value;
  const setorSecao = document.getElementById('selectSecao');
  setorSecao.innerHTML = '<option value="">Carregando setores...</option>';
  if (setorId) {
    try {
      console.log('-----------------');
      console.log(' [ 1038 ]');
      console.log('-----------------');
      const response = await fetch(/segmento/secoes/${setorId});
      const secoes = await response.json();
      console.log(' seções ==>',secoes)
      if (Array.isArray(secoes)) {
         setorSecao.innerHTML = '<option value="">Selecione o setor:</option>';
         secoes.forEach(secao => {
            const opt = document.createElement('option');
            opt.value = secao._id;
            opt.textContent = secao.nomeSecao;
            opt.classList.add("option-roxa");
            setorSecao.appendChild(opt);

            setorSecao.style.backgroundColor="blue";
            setorSecao.style.color="red";
         });
      } else {
        setorSecao.innerHTML = '<option value="">Nenhum setor encontrado.</option>';
      }
    }catch(e){
      console.log('Error ao carregar a seção!')
    }
  }

})
</script>
{{!-- modalContentSetorSecao --}}
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const spans = document.querySelectorAll(".departamento-click");
    const modal = document.getElementById("modalInfoSetorSecao");
    const modalContent = document.getElementById("modalContentSetorSecao");

    spans.forEach(span => {
      span.addEventListener("click", function (e) {
        const index = parseInt(this.dataset.index);

        // Obtem dados do JS pré-carregado
        const dados = window.todosSetoresSecoes?.[index];
        if (!dados) return;

        let html = "";
        if (dados.setores?.length) {
          html += "<strong>Setores:</strong><ul>";
          dados.setores.forEach(s => html += <li>${s}</li>);
          html += "</ul>";
        }

        if (dados.secoes?.length) {
          html += "<strong>Seções:</strong><ul>";
          dados.secoes.forEach(s => html += <li>${s}</li>);
          html += "</ul>";
        }

        modalContent.innerHTML = html;

        // Posiciona o modal
        const rect = this.getBoundingClientRect();
        modal.style.left = ${rect.left + window.scrollX}px;
        modal.style.top = ${rect.top + window.scrollY - modal.offsetHeight - 10}px;
        modal.style.display = "block";
      });
    });

    // Esconde o modal ao clicar fora
    document.addEventListener("click", function (e) {
      if (!e.target.classList.contains("departamento-click") &&
          !modal.contains(e.target)) {
        modal.style.display = "none";
      }
    });
  });
</script>
{{!-- modalContentSetorSecao --}}
<script>
  document.addEventListener("DOMContentLoaded", function () {
    const spans = document.querySelectorAll(".departamento-click");
    const modal = document.getElementById("modalInfoSetorSecao");
    const modalContent = document.getElementById("modalContentSetorSecao");

    spans.forEach(span => {
      span.addEventListener("click", function (e) {
        const index = parseInt(this.dataset.index);

        // Obtem dados do JS pré-carregado
        const dados = window.todosSetoresSecoes?.[index];
        if (!dados) return;

        let html = "";
        if (dados.setores?.length) {
          html += "<strong>Setores:</strong><ul>";
          dados.setores.forEach(s => html += <li>${s}</li>);
          html += "</ul>";
        }

        if (dados.secoes?.length) {
          html += "<strong>Seções:</strong><ul>";
          dados.secoes.forEach(s => html += <li>${s}</li>);
          html += "</ul>";
        }

        modalContent.innerHTML = html;

        // Posiciona o modal
        const rect = this.getBoundingClientRect();
        modal.style.left = ${rect.left + window.scrollX}px;
        modal.style.top = ${rect.top + window.scrollY - modal.offsetHeight - 10}px;
        modal.style.display = "block";
      });
    });

    // Esconde o modal ao clicar fora
    document.addEventListener("click", function (e) {
      if (!e.target.classList.contains("departamento-click") &&
          !modal.contains(e.target)) {
        modal.style.display = "none";
      }
    });
  });
</script>
<script>
  //////////////////////////////   1309    //////////////////////////////////////////////////////
  // Verifica se no bco de imagens há foto que possa ser usada pelo cliente.
  async  function BuscarProdutoImagem(campo) {
      //=========================================================
      console.log('-------------------------');
      console.log('------[ 1314 ] pages/empresa/produto.handlebars---------------');
      console.log('BuscarProdutoImagem(campo)'); 
      console.log(' nome do campo :',campo);
      console.log('');
      const response = await fetch(/gravafoto/produtoImagem/buscar/${campo})
    //  console.log('======================================')
      if(!response.ok) throw new Error("falha na busca");
     
      const docs = await response.json();
      console.log('[ 1213 ]');
      console.log('fim',docs);
      console.log(''); 
      renderResultadoProdutoImagem(docs)
  }

  function renderResultadoProdutoImagem(lista) {
      console.log('');
      console.log(' [ 1328 ] renderizar o Resultado da busca imagem na div:imgbcoImg')
      console.log('número de produtos',lista.length)

      const cont = document.getElementsByName('imgbcoImg'); // seu container roxo
        if (!cont) {
              console.warn('[bcoImg] Container #imgbcoImg não encontrado.');
              return;
        }
        cont.innerHTML = '';
      
        console.log('O elemento = a divisão que conterá as imagens do bco de imagem => ',cont)
      
        const elemento = cont[0];
        console.log('o elemento => ',elemento)
        // Se a lista é vazia então manda msg
        if (!Array.isArray(lista) || lista.length === 0) {
            const vazio = document.getElementById('miBankEmpty');      // D
            const faixa = document.getElementById('miNoBankBanner');   // C
            const titulo = document.querySelector('.mi-slots-title');  // C
            if (vazio) vazio.style.display = 'block';
            if (faixa) faixa.style.display = 'block';
            if (titulo) titulo.textContent = 'Nenhuma imagem no banco — clique nas caixas acima para buscar no computador';
            return;
      }

      // Pega a lista e preenche a divisão que conterá as imagens
      lista.forEach((img, i) => {
        const box = document.createElement('div');
        box.className = 'p-2';
        box.style.width = '160px';
        box.style.display = 'inline-block';
        box.style.cursor = 'pointer';
        box.innerHTML = 
          <div class="border rounded p-2 bg-white">
            <div style="font-size:12px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis" title="${img.produtoNome||''}">
              ${img.produtoNome||'&nbsp;'}
            </div>
            <img src="${img.imagemUrl||''}" alt="" style="width:100%;height:120px;object-fit:cover;margin:6px 0;" />
            <div style="font-size:11px;opacity:.8;">${img.fornecedor||''}</div>
          </div>;
        //box.addEventListener('click', () => selecionarImagemExistente(img)); // próxima etapa
        elemento.appendChild(box);
      });
  }

</script>
<script>
  // Aqui lida com a busca de imagem que estão no computador
  //function liberaComputer(){
  //   const ComputerVisivel= document.getElementById('bodyBusqueComputer').style.display;
  //   if (ComputerVisivel==="none"){
  //      document.getElementById('bodyBusqueComputer').style.display='block';
  
  //      const X=document.getElementById("bodyBusqueComputer_container");
  //      X.style.height="30vh"
  //      X.style.display="block";
  //   }else{
  //     document.getElementById('bodyBusqueComputer').style.display='none';
  //   }
  //} 

  // Aqui lida com as imagens que estão contidas na bcoimagens
//  function liberaBcoImagens(){
//     document.getElementById('bodyBusqueComputer').style.display="none";

     //const X=document.getElementById("bodyBusqueComputer_container");
     //X.style.height="30vh"
     //X.style.display="block";
///  }

  function closeCadastroModal(){
     document.getElementById("cadastroProdutoModal").style.display="none"
  }



</script>
<script>

</script>
<script>
//  function liberaComputer(){
//    document.getElementById('bodyBusqueComputer').style.display = 'block';

//  }
//  function liberaBcoImagens(){
//    document.getElementById('bodyBusqueComputer').style.display = 'none';

//  }
</script>
   {{!-- <div id="bodyBusqueComputer_container" style="display:flex;height: 30vh;background-color:#0661cf;flex-direction: column;">
              
                {{!-- <div id="bodyBusqueComputer" style="background-color: yellow;display: block;margin-top: 1vh;">
                      {{!-- <div id="bodyBusqueComputer_container" style="display:flex;height: 30vh;background-color:#0661cf;flex-direction: column;">
                            
                           
                            <!-- Barra com botão "Gravar todas" -->
                           
                      </div> --}}
                </div> --}}
                

                
                
                </div>
      </div> --}}


<script>
  const $miSlotsTitle   = document.querySelector('.mi-slots-title');
  const $miNoBankBanner = document.getElementById('miNoBankBanner');
  const $miBankEmpty    = document.getElementById('miBankEmpty');

(function(){
    console.log(' [ 1347 ] caminhando para abrir image');
    /** =================== ESTADO =================== **/
    const MAX_SLOTS = 7; // quantidade de slots na faixa magenta
    const slots = []; // { type: 'file'|'bank', file?:File, url?:string, key?:string }
    let nextSlotIndex = 0; // próximo slot livre


    /** =================== ELTs =================== **/
    const $backdrop = document.getElementById('modalImagem');
    const $dialog = $backdrop?.querySelector('.mi-dialog');
    const $miClose = document.getElementById('miClose');
    const $miReloadBank = document.getElementById('miReloadBank');
    const $miClearAll = document.getElementById('miClearAll');
    const $miSlotGrid = document.getElementById('miSlotGrid');
    const $miBankGrid = document.getElementById('imgbcoImg');
    const $miBankEmpty = document.getElementById('miBankEmpty');
    const $hiddenFile = document.getElementById('miHiddenFile');
    const $btnGravar = document.getElementById('btnGravarImagens');


   // const $miProdId = document.getElementById('miProdId');
   // const $miDescricao = document.getElementById('miDescricao');
   // const $miFornecedor = document.getElementById('miFornecedor');
   // const $miDepartamento = document.getElementById('miDepartamento');
   globalThis.abrirModalImagem = function abrirModalImagem({
  produtoId = '', descricao = '', fornecedor = '', departamento = ''
} = {}) {
          console.log('[abrirModalImagem] IN', { produtoId, descricao, fornecedor, departamento });

          // preenche a faixa B (verde)
          $miProdId.value       = String(produtoId || '');
          $miDescricao.value    = String(descricao || '');
          $miFornecedor.value   = String(fornecedor || '');
          $miDepartamento.value = String(departamento || '');

          // cria 7 slots vazios
          resetSlots();

          // carrega banco (D)
          carregarBcoImagens({ codigo: produtoId, descricao, fornecedor, departamento });

          // exibe modal
          $backdrop.classList.add('show');
          $backdrop.setAttribute('aria-hidden','false');
};

    //addEmptySlot(1);

    /** =================== HELPERS =================== **/
   function resetSlots(){
            if (!$miSlotGrid) { console.warn('[slots] #miSlotGrid não encontrado'); return; }
            slots.length = 0;
            nextSlotIndex = 0;
            $miSlotGrid.innerHTML = '';
            for (let i = 0; i < MAX_SLOTS; i++) addEmptySlot(i); // ✅ passa i
            console.log('[resetSlots] criados', MAX_SLOTS, 'slots');
    }

    // addEmptySlot();
    function addEmptySlot(idx){
  const slot = document.createElement('div');
  slot.className = 'mi-slot empty';
  slot.dataset.idx = idx;
  slot.dataset.num = idx + 1;

  slot.addEventListener('click', () => {
    $hiddenFile.dataset.targetIdx = idx;
    $hiddenFile.value = '';
    $hiddenFile.click();
  });

  const remove = document.createElement('button');
  remove.className = 'mi-remove';
  remove.title = 'Remover';
  remove.textContent = '×';
  remove.addEventListener('click', (ev)=>{ ev.stopPropagation(); clearSlot(idx); });
  slot.appendChild(remove);

  $miSlotGrid.appendChild(slot);
  slots[idx] = null;
}
////////////////////////////////////////////////////////////////////
function fillSlotWithImage(idx, src){
const slot = $miSlotGrid.children[idx];
if (!slot) return;
slot.classList.remove('empty');
slot.classList.add('filled');
slot.innerHTML = slot.innerHTML; // preserva botão remove


// remove texto placeholder
slot.textContent = '';


const img = document.createElement('img');
img.src = src;
slot.appendChild(img);


const remove = document.createElement('button');
remove.className = 'mi-remove';
remove.textContent = '×';
remove.title = 'Remover';
remove.addEventListener('click', (ev)=>{ ev.stopPropagation(); clearSlot(idx); });
slot.appendChild(remove);


// avança ponteiro de próximo slot
recomputeNextIndex();
}

function clearSlot(idx){
const slot = $miSlotGrid.children[idx];
if (!slot) return;
slot.className = 'mi-slot empty';
slot.innerHTML = '';
const remove = document.createElement('button');
remove.className = 'mi-remove';
remove.textContent = '×';
remove.title = 'Remover';
remove.addEventListener('click', (ev)=>{ ev.stopPropagation(); clearSlot(idx); });
slot.appendChild(remove);
slots[idx] = null;
recomputeNextIndex();
}

function firstEmptyIndex(){
for (let i=0; i<slots.length; i++) if (!slots[i]) return i;
return -1;
}
function recomputeNextIndex(){ nextSlotIndex = firstEmptyIndex(); }

/** =================== BCO DE IMAGENS (D) =================== **/
async function carregarBcoImagens(params){
      function setBankEmptyState(flag){
            if ($miBankEmpty)    $miBankEmpty.style.display    = flag ? 'block' : 'none';   // D
            if ($miNoBankBanner) $miNoBankBanner.style.display = flag ? 'block' : 'none';   // C
            if ($miSlotsTitle)   $miSlotsTitle.textContent = flag
              ? 'Nenhuma imagem no banco — clique nas caixas acima para buscar no computador'
              : 'Seleção e Gravar Imagens';
      }
      $miBankGrid.innerHTML = '';
      setBankEmptyState(false);

      // params: { codigo, descricao, fornecedor, departamento }
      $miBankGrid.innerHTML = '';
      $miBankEmpty.style.display = 'none';
      $miBankGrid.innerHTML = '';
      setBankEmptyState(false);

      try {
            const q = new URLSearchParams(params || {}).toString();
            const res = await fetch(/imagens/banco?${q});
            if (!res.ok) throw new Error('Falha ao buscar banco de imagens');

            if (!Array.isArray(lista) || lista.length === 0) {
              setBankEmptyState(true);
              return;
            }

            const lista = await res.json(); // esperado: [{url, key}] ou []
            for (const item of lista) {
                const card = document.createElement('div');
                card.className = 'mi-thumb';
                const img = document.createElement('img');
                img.loading = 'lazy';
                img.src = item.url;
               card.appendChild(img);
               card.addEventListener('click', ()=>{
                    const idx = firstEmptyIndex();
                    if (idx === -1) { alert('Limite de 7 imagens atingido.'); return; }
                    slots[idx] = { type: 'bank', url: item.url, key: item.key };
                    fillSlotWithImage(idx, item.url);
               });


              $miBankGrid.appendChild(card);
            }
      } catch (err) {
              console.error('Erro ao carregar banco de imagens:', err);
              $miBankEmpty.style.display = 'block';
              $miBankEmpty.textContent = 'Erro ao carregar o banco de imagens.';
      }
}

        $hiddenFile?.addEventListener('change', (ev)=>{
                const file = ev.target.files?.[0];
                const targetIdx = Number(ev.target.dataset.targetIdx ?? '-1');
                if (!file || targetIdx < 0) return;


                const reader = new FileReader();
                reader.onload = () => {
                slots[targetIdx] = { type: 'file', file };
                fillSlotWithImage(targetIdx, reader.result);
                };
                reader.readAsDataURL(file);
        });
        /** =================== AÇÕES TOP/BOTTOM =================== **/
        $miClose?.addEventListener('click', closeModal);

        $miReloadBank?.addEventListener('click', ()=>{
            const params = {
                          codigo: $miProdId.value,
                          descricao: $miDescricao.value,
                          fornecedor: $miFornecedor.value,
                          departamento:$miDepartamento.value,
                              };
            carregarBcoImagens(params);
        });
        $miClearAll?.addEventListener('click', ()=>{ resetSlots(); });
  

        $btnGravar?.addEventListener('click', async ()=>{
              const temAlgo = slots.some(Boolean);
              if (!temAlgo) { alert('Nenhuma imagem selecionada.'); return; }


              const form = new FormData();
              form.append('produtoId', $miProdId.value || '');


              const refs = [];
              slots.forEach((s, i)=>{
                    if (!s) return;
                    if (s.type === 'file' && s.file) form.append('uploadFiles', s.file, s.file.name);
                    if (s.type === 'bank' && (s.url || s.key)) refs.push({ url: s.url, key: s.key });
              });

              form.append('refs', JSON.stringify(refs));
                    try {
                            const res = await fetch('/imagens/salvar', { method: 'POST', body: form });
                            if (!res.ok) throw new Error('Falha ao gravar imagens');
                            const out = await res.json();
                            alert(out?.message || 'Imagens gravadas com sucesso.');
                            closeModal();
                    } catch (err) {
                            console.error(err);
                            alert('Erro ao gravar imagens. Veja o console.');
                    }
        });


/** =================== API PÚBLICA =================== **/

//window.abrirModalImagem = function abrirModalImagem({ produtoId = '', descricao = '', fornecedor = '', departamento = '' } = {}){
//          $miProdId.value = String(produtoId || '');
//          $miDescricao.value = String(descricao || '');
//          $miFornecedor.value = String(fornecedor || '');
//          $miDepartamento.value = String(departamento || '');
//          console.log('AQQQUII')

          // zera slots (C)
//          resetSlots();

          // carrega banco (D) imediatamente
//          carregarBcoImagens({
//            codigo: produtoId,
//            descricao,
//            fornecedor,
//            departamento
//          });


          // exibe modal
//          $backdrop.classList.add('show');
//          $backdrop.setAttribute('aria-hidden','false');
//};


function closeModal(){
    $backdrop.classList.remove('show');
    $backdrop.setAttribute('aria-hidden','true');
}

// Clique fora fecha
$backdrop?.addEventListener('click', (ev)=>{ if (ev.target === $backdrop) closeModal(); });

// ESC fecha
window.addEventListener('keydown', (ev)=>{ if (ev.key === 'Escape' && $backdrop.classList.contains('show')) closeModal(); });
})();

function setBankEmptyState(flag){
  // D: mensagem “Não há imagens.”
  if ($miBankEmpty) $miBankEmpty.style.display = flag ? 'block' : 'none';
  // C: faixa de orientação + título
  if ($miNoBankBanner) $miNoBankBanner.style.display = flag ? 'block' : 'none';
  if ($miSlotsTitle)
    $miSlotsTitle.textContent = flag
      ? 'Nenhuma imagem no banco — clique nas caixas acima para buscar no computador'
      : 'Seleção e Gravar Imagens';
}


</script><style>
   .cabecalho-tabela th {
    background-color: #f8f9fa;
    color: #333;
    padding: 10px;
    font-weight: 100;
    font-size: smaller;
  }
  table td{
    background-color: #068648;
  }

  .row{
    margin-bottom:5px;background-color: #d9c9c9;color: #0d0d0d;height: 5vh;font-weight: 100;
  }

  .row label {
    font-weight: 100;
    height: 2vh;
    padding-left: 10px;
  }

  .row input {
    font-weight: 600;
    height: 3vh;background-color: #f0f3f2;
  }

  .longa{
    width: 10vw;
    background-color: #068648;
  }



  .curta{
    width: 5vw;
    background-color: brown;
  }

  .ajusteRow{
     min-width: 100px; max-width: 300px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
  }

</style>
<script>
  let =jaCarregouDepartamentos=false;
  let selecionados = [];
</script>
<div id="corpo" style="width: 99vw;height: 96vh;margin: auto;background-color: #d0d3d0;">
  
  {{!-- <div>
     <h1 >Lista de Lojistas</h1>  
  </div>   --}}
    <div id="cadastroLojistaModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:#bbbcbb80; justify-content:center; align-items:center; z-index:9999;padding: 5px;">
        <div style="background:#fff; width:50%; height:92vh;margin: auto;padding:10px; border-radius:10px; box-shadow:0 5px 10px #00000080;overflow-x: scroll;overflow-y: auto;">
            <h4 style="font-weight: 200;color: #141414;">Cadastro de Lojista</h4>
            <div id="divForm" style="background-color:transparent;height:90vh ;">
                <form id="cadastroLojistaForm" style="padding-left: 10px;width: 95%;margin: auto;background-color: #ffffff;">
                        <input type="hidden" id="editId" name="_id">
                        <div class="row">
                            <label>Razao:</label>
                            <input type="text" id="inputrazao" name="inputrazao" class="form-control">
                        </div>
                        <div class="row">
                            <label>Responsável:</label>
                            <input type="text" id="responsavel" name="responsavel" class="form-control">
                        </div>
                        <div class="row">
                            <label>CPF:</label>
                            <input type="text" id="cpf" name="cpf" class="form-control">
                        </div>
                        <div class="row">
                            <label>CNPJ:</label>
                            <input type="text" id="cnpj" name="cnpj" class="form-control">
                        </div>
                        <div class="row">
                            <label>Inscrição:</label>
                            <input type="text" id="inscricao" name="inscricao" class="form-control">
                        </div>
                        <div class="row">
                            <label>Site:</label>
                            <input type="text" id="site" name="site" class="form-control">
                        </div>
                        <div class="row">
                            <label>Marca:</label>
                            <input type="text" id="marca" name="marca" class="form-control">
                        </div>
                        <div class="row">
                            <label>Celular:</label>
                            <input type="text" id="celular" name="celular" class="form-control">
                        </div>
                        <div class="row">
                            <label>Fone:</label>
                            <input type="text" id="fone" name="fone" class="form-control">
                        </div>
                        <div class="row">
                            <label>Email:</label>
                            <input type="email" id="email" name="email" class="form-control">
                        </div>
                        <div class="row">
                            <label>Senha:</label>
                            <input type="password" id="senha" name="senha" class="form-control">
                        </div>
                        <div class="row">
                            <label>Cep:</label>
                            <input type="text" id="cep" name="cep" class="form-control">
                        </div>
                        <div class="row">
                            <label>Logradouro:</label>
                            <input type="text" id="logradouro" name="logradouro" class="form-control">
                        </div>
                        <div class="row">
                            <label>Complemento:</label>
                            <input type="text" id="complemento" name="complemento" class="form-control">
                        </div>
                        <div class="row">
                            <label>Bairro:</label>
                            <input type="text" id="bairro" name="bairro" class="form-control">
                        </div>
                        <div class="row">
                            <label>Cidade:</label>
                            <input type="text" id="cidade" name="cidade" class="form-control">
                        </div>
                        <div class="row">
                            <label>Estado:</label>
                            <input type="text" id="estado" name="estado" class="form-control" >
                        </div>
                        {{!-- ///////////////////////////////////////////////////////////////////////// --}}
                        <!-- Lista dos departamentos selecionados (pode ser antes visualmente) -->
                        <div class="row">
                              <label>Departameto selecionados:</label>
                          <div id="listaDepartamentosSelecionados" style="margin-bottom: 1vh;">
                              <input class="form-control" name="departamentos_nome[]" value="" readonly
                                  style="width: 20vw; height: 3.5vh;background-color: #bb048e;" />
                          </div>
                        </div>
                        <!-- Container onde cada linha select+input+ADD será inserida -->
                        <div class="row">

                        </div>
                        <div id="departamentoContainer" style="display: flex; flex-direction: column; gap: 4px; background-color: #068648; padding: 4px 1vw; width: 100%;">
                              <!-- Primeira linha de seleção -->
                              <div class="grupo-depto" style="display: flex; align-items: center; gap: 1vw;flex-direction: row;justify-content: space-between;">
                                      <!-- SELECT -->
                                      <select class="form-control select-departamento"
                                              name="departamentos[]"
                                              style="width: 15vw; height: 3.5vh; background-color: #ffffff; color: #db1212;">
                                        <option value="">Selecione um departamento</option>
                                      </select>
                                      <!-- INPUT readonly -->
                                      <!-- BOTÃO ADD -->
                                      <button type="button" class="btn btn-info btn-add-depto"
                                              style="padding: 2px 12px; font-size: medium;">ADD</button>
                              </div>
                        </div>
                        {{!-- ///////////////////////////////////////////////////////////////////////// --}}
                        <div class="row" style="height: 4vh;background-color:#0d0d0d ;margin-bottom: .5vh;margin-top: 4vh;">
                      
                        </div>
                        <div class="row" style="display:flex;flex-direction: row;justify-content:space-around;background-color: transparent;">
                            <button type="button" class="btn btn-secondary" style="width: 30%;" onclick="closeCadastroModal()">Cancelar</button>
                            <button type="submit" class="btn btn-primary" style="width: 30%;">Salvar</button>
                        </div>
                </form>
            </div>
        </div>
    </div>  
    <div id="listaLojista" class="" style="background-color:#fff;margin-top: 6vh;">
          <div style="display: flex;flex-direction: row;justify-content: center;">
          <button style="border: none;background-color:transparent;" class="btn btn-sm" onclick="openCadLojistaModal()">
            
            <h1 style="font-weight:200;color:#054288;font-size:medium">Cadastro de Lojista</h1>
          </button>
          </div>  
            <div id="barraSelect" style="display: flex;flex-direction: row;justify-content: space-between;width: 96vw;margin: auto;">
                <div style="background:transparent;width:32vw ;">
                  <h2 style="color: blue;">Lista de lojista</h2>
                </div>
                {{!-- <div style="display: flex;flex-direction: row;justify-content:center;height: 2.5vh;width:32vw ;background:transparent;">
                    <select>
                        <option>Cariacica</option>
                        <option>Serra</option>
                        <option>Guarapari</option>
                        <option>Vila Velha</option>
                        <option>Vitória</option>
                    </select>
                </div>
                <div style="display: flex;flex-direction: row;justify-content:center;height: 2.5vh;background:transparent;width:32vw ;">
                    <select>
                        <option>Material Construção</option>
                        <option>Serviços</option>
                        <option>Saúde</option>
                        <option>Comunicação</option>
                        <option>Imóveis</option>
                    </select>
                </div> --}}
            </div>
            <div style="background-color:#fff;width: 100%;height: 80vh;margin: auto;overflow: auto;padding: 4px;">
                    <div>
                      {{!-- {{lojista.segmentos}} --}}
                    </div>    
                    <table class="table table-bordered">
                          <thead>
                              <tr class="cabecalho-tabela">
                                  <th class="click-hide" data-column="0"><i data-lucide="eye-off"></i>Razão</th>
                                  {{!-- <th>Situação</th>
                                  <th>Template</th>
                                  <th>Atividade</th> --}}
                                  {{!-- <th>Resp.</th>
                                  <th>CPF</th> --}}
                                  <th class="click-hide" data-column="1"><i data-lucide="eye-off"></i>CNPJ</th>
                                  <th class="click-hide" data-column="2">Inscrição</th>
                                  <th class="click-hide" data-column="3">Site</th>
                                  <th class="click-hide" data-column="4">Marca</th>
                                  <th class="click-hide" data-column="5">Celular</th>
                                  <th class="click-hide" data-column="6">Fone</th>
                                  <th class="click-hide" data-column="7">Email</th>
                                  <th class="click-hide" data-column="8">Cep</th>
                                  <th class="click-hide" data-column="9">Logradouro</th>
                                  {{!-- <th>Numero</th> --}}
                                  <th class="click-hide" data-column="10">Complemento</th>
                                  <th class="click-hide" data-column="11">Cidade</th>
                                  <th class="click-hide" data-column="12">Bairro</th>
                                  <th class="click-hide" data-column="13">Estado</th>
                                  <th class="click-hide" data-column="14">Segmentos</th>
                                  <th class="click-hide" data-column="15">Status</th>
                                  <th class="click-hide" data-column="16">Ações</th>
                              </tr>
                          </thead>
                          <tbody>
                              {{#each lojista}}
                              <tr data-id="{{this._id}}">
                                  <td class="ajusteRow" contenteditable="true" data-field="razao">
                                      {{this.razao}}
                                  </td>
                                  <td class="ajusteRow" contenteditable="true" data-field="cnpj">{{this.cnpj}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="inscricao">{{this.inscricao}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="site">{{this.site}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="marca">{{this.marca}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="celular">{{this.celular}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="telefone">{{this.telefone}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="email">{{this.email}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="cep">{{this.cep}}</td>
                                  <td class="ajusteRow" >{{this.logradouro}}</td>
                                  {{!-- <td class="ajusteRow">{{this.numero}}</td> --}}
                                  <td class="ajusteRow" >{{this.complemento}}</td>
                                  <td class="ajusteRow">{{this.cidade}}</td>
                                  <td class="ajusteRow">{{this.bairro}}</td>
                                  <td class="ajusteRow">{{this.estado}}</td>
                                  <td class="ajusteRow" style="color:#bb048e">
                                    {{#each departamentos}}
                                          <option value="{{this._id}}">{{this.nomeDepartamento}}</option>
                                    {{/each}}
                                  </td>
                                  <td>{{this.ativo}}</td>
                                  <td>
                                  <div class="d-flex justify-content-center align-items-center gap-2">
                                    <button id="show-all" class="save-line btn btn-sm btn-secondary flex-fill text-center" style="min-width: 80px;margin-left: 3px;background-color: #bb048e;border: 2px white solid;">
                                      <a href="" class="btn btn-sm flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid;background-color: #bb048e;">All</a>
                                    </button>
                                    <button data-id="{{this._id}}" href="" class="btn btn-sm flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid;background-color: coral;">
                                      <a class="btn btn-sm flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid;background-color: coral;">Editar</a>
                                                
                                    </button>
                                    
                                    <button data-id="{{this._id}}"  class="btn btn-sm btn-warning flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid;background-color: #bb0404;">
                                      <a href="/lojistas/delete/{{this._id}}" class="btn btn-sm btn-danger flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid">Excluir</a>
                                    </button>  
                                  </div>
                                  </td>
                              </tr>
                              {{/each}}
                          </tbody>
                    </table>
            </div>
            
    </div>
{{!-- ///////////////////////////////////////////////////////////////// --}}
</div>


<script>
  //lucide.createIcons();

    document.querySelectorAll(".click-hide").forEach(th => {
      th.addEventListener("click", (e) => {
        const columnIndex = parseInt(th.dataset.column);
        const table = th.closest("table");
        const icon = th.querySelector("svg");
        if (e.ctrlKey) {
          const rowsArray = Array.from(table.querySelectorAll("tbody tr"));
          rowsArray.sort((a, b) => {
            const valA = a.children[columnIndex].textContent.trim().toLowerCase();
            const valB = b.children[columnIndex].textContent.trim().toLowerCase();
            return valA.localeCompare(valB);
          });
          rowsArray.forEach(row => table.querySelector("tbody").appendChild(row));
        } else {
          table.querySelectorAll("tr").forEach(row => {
            if (row.children[columnIndex]) {
              row.children[columnIndex].classList.toggle("d-none");
            }
          });
          icon.setAttribute("data-lucide", icon.getAttribute("data-lucide") === "eye-off" ? "eye" : "eye-off");
          lucide.createIcons();
        }
      });
    });

    document.getElementById("show-all").addEventListener("click", () => {
      document.querySelectorAll("table tr").forEach(row => {
        Array.from(row.children).forEach(cell => {
          cell.classList.remove("d-none");
          cell.style.display = "";
        });
      });
      document.querySelectorAll(".click-hide svg").forEach(icon => {
        icon.setAttribute("data-lucide", "eye-off");
      });
      lucide.createIcons();
    });

    document.querySelectorAll("td[contenteditable=true]").forEach(cell => {
      cell.addEventListener("blur", async () => {
        const row = cell.closest("tr");
        const id = row.dataset.id;
        const field = cell.dataset.field;
        const value = cell.textContent.trim();
        try {
          console.log("RRRRRRRRRRRRRRRRRRRRR",id)
          const response = await fetch(/lojista/lojista/update/${id}, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ [field]: value })
          });
          const result = await response.json();
          if (response.ok) {
            cell.style.backgroundColor = "#c8f7c5";
            setTimeout(() => cell.style.backgroundColor = "", 1000);
          } else {
            alert("Erro ao atualizar.");
          }
        } catch (error) {
          console.error("Falha na atualização:", error);
          alert("Erro na comunicação.");
        }
      });
    });
</script>
{{!-- //</script> --}}
<script>
  document.querySelectorAll(".save-line").forEach(button => {
  button.addEventListener("click", async () => {
    const id = row.dataset.id;
    const row = row.closest("tr");
    const data = {};

    row.querySelectorAll("td[contenteditable=true]").forEach(cell => {
      data[cell.dataset.field] = cell.textContent.trim();
    });

    try {
      const response = await fetch(/lojistas/update/${id}, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });

      const result = await response.json();
      if (response.ok) {
        row.style.backgroundColor = "#c8f7c5";
        setTimeout(() => row.style.backgroundColor = "", 1000);
      } else {
        alert("Erro ao atualizar.");
      }
    } catch (error) {
      console.error("Falha na atualização:", error);
      alert("Erro na comunicação.");
    }
  });
});


</script>
<script>
function  openCadLojistaModal() {
  openCadastroLojistaModal();
}
</script>
<script>
   function openCadastroLojistaModal(){
      //document.getElementById("cadastroLojistaModal").style.display="block";
       window.location.href = "/lojista/departamento-selecao";
   }  
</script>
{{!-- //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX --}}

<script>
/* ===============================
   ROTINA 1: Variáveis globais
   Armazena os dados carregados do servidor e controle de estado
================================ */
let listaDepartamentos = [];

let jaCarregouDepartamentos = false;
let contador = 1; // controla a quantidade de departamentos adicionados
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================ */
const maxDepartamentos = 10;
//const seleciXonados = [];



</script>



 <style>
   .cabecalho-tabela th {
    background-color: #f8f9fa;
    color: #333;
    padding: 10px;
    font-weight: 100;
    font-size: smaller;
  }
  table td{
    background-color: #068648;
  }

  .row{
    margin-bottom:5px;background-color: #d9c9c9;color: #0d0d0d;height: 5vh;font-weight: 100;
  }

  .row label {
    font-weight: 100;
    height: 2vh;
    padding-left: 10px;
  }

  .row input {
    font-weight: 600;
    height: 3vh;background-color: #f0f3f2;
  }

  .longa{
    width: 10vw;
    background-color: #068648;
  }



  .curta{
    width: 5vw;
    background-color: brown;
  }

  .ajusteRow{
     min-width: 100px; max-width: 300px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;
  }

</style>
<script>
  let =jaCarregouDepartamentos=false;
  let selecionados = [];
</script>
<div id="corpo" style="width: 99vw;height: 96vh;margin: auto;background-color: #d0d3d0;">
  
  {{!-- <div>
     <h1 >Lista de Lojistas</h1>  
  </div>   --}}
    <div id="cadastroLojistaModal" style="display:none; position:fixed; top:0; left:0; width:100%; height:100%; background:#bbbcbb80; justify-content:center; align-items:center; z-index:9999;padding: 5px;">
        <div style="background:#fff; width:50%; height:92vh;margin: auto;padding:10px; border-radius:10px; box-shadow:0 5px 10px #00000080;overflow-x: scroll;overflow-y: auto;">
            <h4 style="font-weight: 200;color: #141414;">Cadastro de Lojista</h4>
            <div id="divForm" style="background-color:transparent;height:90vh ;">
                <form id="cadastroLojistaForm" style="padding-left: 10px;width: 95%;margin: auto;background-color: #ffffff;">
                        <input type="hidden" id="editId" name="_id">
                        <div class="row">
                            <label>Razao:</label>
                            <input type="text" id="inputrazao" name="inputrazao" class="form-control">
                        </div>
                        <div class="row">
                            <label>Responsável:</label>
                            <input type="text" id="responsavel" name="responsavel" class="form-control">
                        </div>
                        <div class="row">
                            <label>CPF:</label>
                            <input type="text" id="cpf" name="cpf" class="form-control">
                        </div>
                        <div class="row">
                            <label>CNPJ:</label>
                            <input type="text" id="cnpj" name="cnpj" class="form-control">
                        </div>
                        <div class="row">
                            <label>Inscrição:</label>
                            <input type="text" id="inscricao" name="inscricao" class="form-control">
                        </div>
                        <div class="row">
                            <label>Site:</label>
                            <input type="text" id="site" name="site" class="form-control">
                        </div>
                        <div class="row">
                            <label>Marca:</label>
                            <input type="text" id="marca" name="marca" class="form-control">
                        </div>
                        <div class="row">
                            <label>Celular:</label>
                            <input type="text" id="celular" name="celular" class="form-control">
                        </div>
                        <div class="row">
                            <label>Fone:</label>
                            <input type="text" id="fone" name="fone" class="form-control">
                        </div>
                        <div class="row">
                            <label>Email:</label>
                            <input type="email" id="email" name="email" class="form-control">
                        </div>
                        <div class="row">
                            <label>Senha:</label>
                            <input type="password" id="senha" name="senha" class="form-control">
                        </div>
                        <div class="row">
                            <label>Cep:</label>
                            <input type="text" id="cep" name="cep" class="form-control">
                        </div>
                        <div class="row">
                            <label>Logradouro:</label>
                            <input type="text" id="logradouro" name="logradouro" class="form-control">
                        </div>
                        <div class="row">
                            <label>Complemento:</label>
                            <input type="text" id="complemento" name="complemento" class="form-control">
                        </div>
                        <div class="row">
                            <label>Bairro:</label>
                            <input type="text" id="bairro" name="bairro" class="form-control">
                        </div>
                        <div class="row">
                            <label>Cidade:</label>
                            <input type="text" id="cidade" name="cidade" class="form-control">
                        </div>
                        <div class="row">
                            <label>Estado:</label>
                            <input type="text" id="estado" name="estado" class="form-control" >
                        </div>
                        {{!-- ///////////////////////////////////////////////////////////////////////// --}}
                        <!-- Lista dos departamentos selecionados (pode ser antes visualmente) -->
                        <div class="row">
                              <label>Departameto selecionados:</label>
                          <div id="listaDepartamentosSelecionados" style="margin-bottom: 1vh;">
                              <input class="form-control" name="departamentos_nome[]" value="" readonly
                                  style="width: 20vw; height: 3.5vh;background-color: #bb048e;" />
                          </div>
                        </div>
                        <!-- Container onde cada linha select+input+ADD será inserida -->
                        <div class="row">

                        </div>
                        <div id="departamentoContainer" style="display: flex; flex-direction: column; gap: 4px; background-color: #068648; padding: 4px 1vw; width: 100%;">
                              <!-- Primeira linha de seleção -->
                              <div class="grupo-depto" style="display: flex; align-items: center; gap: 1vw;flex-direction: row;justify-content: space-between;">
                                      <!-- SELECT -->
                                      <select class="form-control select-departamento"
                                              name="departamentos[]"
                                              style="width: 15vw; height: 3.5vh; background-color: #ffffff; color: #db1212;">
                                        <option value="">Selecione um departamento</option>
                                      </select>
                                      <!-- INPUT readonly -->
                                      <!-- BOTÃO ADD -->
                                      <button type="button" class="btn btn-info btn-add-depto"
                                              style="padding: 2px 12px; font-size: medium;">ADD</button>
                              </div>
                        </div>
                        {{!-- ///////////////////////////////////////////////////////////////////////// --}}
                        <div class="row" style="height: 4vh;background-color:#0d0d0d ;margin-bottom: .5vh;margin-top: 4vh;">
                      
                        </div>
                        <div class="row" style="display:flex;flex-direction: row;justify-content:space-around;background-color: transparent;">
                            <button type="button" class="btn btn-secondary" style="width: 30%;" onclick="closeCadastroModal()">Cancelar</button>
                            <button type="submit" class="btn btn-primary" style="width: 30%;">Salvar</button>
                        </div>
                </form>
            </div>
        </div>
    </div>  
    <div id="listaLojista" class="" style="background-color:#fff;margin-top: 6vh;">
          <div style="display: flex;flex-direction: row;justify-content: center;">
          <button style="border: none;background-color:transparent;" class="btn btn-sm" onclick="openCadLojistaModal()">
            
            <h1 style="font-weight:200;color:#054288;font-size:medium">Cadastro de Lojista</h1>
          </button>
          </div>  
            <div id="barraSelect" style="display: flex;flex-direction: row;justify-content: space-between;width: 96vw;margin: auto;">
                <div style="background:transparent;width:32vw ;">
                  <h2 style="color: blue;">Lista de lojista</h2>
                </div>
                {{!-- <div style="display: flex;flex-direction: row;justify-content:center;height: 2.5vh;width:32vw ;background:transparent;">
                    <select>
                        <option>Cariacica</option>
                        <option>Serra</option>
                        <option>Guarapari</option>
                        <option>Vila Velha</option>
                        <option>Vitória</option>
                    </select>
                </div>
                <div style="display: flex;flex-direction: row;justify-content:center;height: 2.5vh;background:transparent;width:32vw ;">
                    <select>
                        <option>Material Construção</option>
                        <option>Serviços</option>
                        <option>Saúde</option>
                        <option>Comunicação</option>
                        <option>Imóveis</option>
                    </select>
                </div> --}}
            </div>
            <div style="background-color:#fff;width: 100%;height: 80vh;margin: auto;overflow: auto;padding: 4px;">
                    <div>
                      {{!-- {{lojista.segmentos}} --}}
                    </div>    
                    <table class="table table-bordered">
                          <thead>
                              <tr class="cabecalho-tabela">
                                  <th class="click-hide" data-column="0"><i data-lucide="eye-off"></i>Razão</th>
                                  {{!-- <th>Situação</th>
                                  <th>Template</th>
                                  <th>Atividade</th> --}}
                                  {{!-- <th>Resp.</th>
                                  <th>CPF</th> --}}
                                  <th class="click-hide" data-column="1"><i data-lucide="eye-off"></i>CNPJ</th>
                                  <th class="click-hide" data-column="2">Inscrição</th>
                                  <th class="click-hide" data-column="3">Site</th>
                                  <th class="click-hide" data-column="4">Marca</th>
                                  <th class="click-hide" data-column="5">Celular</th>
                                  <th class="click-hide" data-column="6">Fone</th>
                                  <th class="click-hide" data-column="7">Email</th>
                                  <th class="click-hide" data-column="8">Cep</th>
                                  <th class="click-hide" data-column="9">Logradouro</th>
                                  {{!-- <th>Numero</th> --}}
                                  <th class="click-hide" data-column="10">Complemento</th>
                                  <th class="click-hide" data-column="11">Cidade</th>
                                  <th class="click-hide" data-column="12">Bairro</th>
                                  <th class="click-hide" data-column="13">Estado</th>
                                  <th class="click-hide" data-column="14">Segmentos</th>
                                  <th class="click-hide" data-column="15">Status</th>
                                  <th class="click-hide" data-column="16">Ações</th>
                              </tr>
                          </thead>
                          <tbody>
                              {{#each lojista}}
                              <tr data-id="{{this._id}}">
                                  <td class="ajusteRow" contenteditable="true" data-field="razao">
                                      {{this.razao}}
                                  </td>
                                  <td class="ajusteRow" contenteditable="true" data-field="cnpj">{{this.cnpj}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="inscricao">{{this.inscricao}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="site">{{this.site}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="marca">{{this.marca}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="celular">{{this.celular}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="telefone">{{this.telefone}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="email">{{this.email}}</td>
                                  <td class="ajusteRow" contenteditable="true" data-field="cep">{{this.cep}}</td>
                                  <td class="ajusteRow" >{{this.logradouro}}</td>
                                  {{!-- <td class="ajusteRow">{{this.numero}}</td> --}}
                                  <td class="ajusteRow" >{{this.complemento}}</td>
                                  <td class="ajusteRow">{{this.cidade}}</td>
                                  <td class="ajusteRow">{{this.bairro}}</td>
                                  <td class="ajusteRow">{{this.estado}}</td>
                                  <td class="ajusteRow" style="color:#bb048e">
                                    {{#each departamentos}}
                                          <option value="{{this._id}}">{{this.nomeDepartamento}}</option>
                                    {{/each}}
                                  </td>
                                  <td>{{this.ativo}}</td>
                                  <td>
                                  <div class="d-flex justify-content-center align-items-center gap-2">
                                    <button id="show-all" class="save-line btn btn-sm btn-secondary flex-fill text-center" style="min-width: 80px;margin-left: 3px;background-color: #bb048e;border: 2px white solid;">
                                      <a href="" class="btn btn-sm flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid;background-color: #bb048e;">All</a>
                                    </button>
                                    <button data-id="{{this._id}}" href="" class="btn btn-sm flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid;background-color: coral;">
                                      <a class="btn btn-sm flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid;background-color: coral;">Editar</a>
                                                
                                    </button>
                                    
                                    <button data-id="{{this._id}}"  class="btn btn-sm btn-warning flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid;background-color: #bb0404;">
                                      <a href="/lojistas/delete/{{this._id}}" class="btn btn-sm btn-danger flex-fill text-center" style="min-width: 80px;margin-left: 3px;border: 2px white solid">Excluir</a>
                                    </button>  
                                  </div>
                                  </td>
                              </tr>
                              {{/each}}
                          </tbody>
                    </table>
            </div>
            
    </div>
{{!-- ///////////////////////////////////////////////////////////////// --}}
</div>


<script>
  //lucide.createIcons();

    document.querySelectorAll(".click-hide").forEach(th => {
      th.addEventListener("click", (e) => {
        const columnIndex = parseInt(th.dataset.column);
        const table = th.closest("table");
        const icon = th.querySelector("svg");
        if (e.ctrlKey) {
          const rowsArray = Array.from(table.querySelectorAll("tbody tr"));
          rowsArray.sort((a, b) => {
            const valA = a.children[columnIndex].textContent.trim().toLowerCase();
            const valB = b.children[columnIndex].textContent.trim().toLowerCase();
            return valA.localeCompare(valB);
          });
          rowsArray.forEach(row => table.querySelector("tbody").appendChild(row));
        } else {
          table.querySelectorAll("tr").forEach(row => {
            if (row.children[columnIndex]) {
              row.children[columnIndex].classList.toggle("d-none");
            }
          });
          icon.setAttribute("data-lucide", icon.getAttribute("data-lucide") === "eye-off" ? "eye" : "eye-off");
          lucide.createIcons();
        }
      });
    });

    document.getElementById("show-all").addEventListener("click", () => {
      document.querySelectorAll("table tr").forEach(row => {
        Array.from(row.children).forEach(cell => {
          cell.classList.remove("d-none");
          cell.style.display = "";
        });
      });
      document.querySelectorAll(".click-hide svg").forEach(icon => {
        icon.setAttribute("data-lucide", "eye-off");
      });
      lucide.createIcons();
    });

    document.querySelectorAll("td[contenteditable=true]").forEach(cell => {
      cell.addEventListener("blur", async () => {
        const row = cell.closest("tr");
        const id = row.dataset.id;
        const field = cell.dataset.field;
        const value = cell.textContent.trim();
        try {
          console.log("RRRRRRRRRRRRRRRRRRRRR",id)
          const response = await fetch(/lojista/lojista/update/${id}, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ [field]: value })
          });
          const result = await response.json();
          if (response.ok) {
            cell.style.backgroundColor = "#c8f7c5";
            setTimeout(() => cell.style.backgroundColor = "", 1000);
          } else {
            alert("Erro ao atualizar.");
          }
        } catch (error) {
          console.error("Falha na atualização:", error);
          alert("Erro na comunicação.");
        }
      });
    });
</script>
{{!-- //</script> --}}
<script>
  document.querySelectorAll(".save-line").forEach(button => {
  button.addEventListener("click", async () => {
    const id = row.dataset.id;
    const row = row.closest("tr");
    const data = {};

    row.querySelectorAll("td[contenteditable=true]").forEach(cell => {
      data[cell.dataset.field] = cell.textContent.trim();
    });

    try {
      const response = await fetch(/lojistas/update/${id}, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify(data)
      });

      const result = await response.json();
      if (response.ok) {
        row.style.backgroundColor = "#c8f7c5";
        setTimeout(() => row.style.backgroundColor = "", 1000);
      } else {
        alert("Erro ao atualizar.");
      }
    } catch (error) {
      console.error("Falha na atualização:", error);
      alert("Erro na comunicação.");
    }
  });
});


</script>
<script>
function  openCadLojistaModal() {
  openCadastroLojistaModal();
}
</script>
<script>
   function openCadastroLojistaModal(){
      //document.getElementById("cadastroLojistaModal").style.display="block";
       window.location.href = "/lojista/departamento-selecao";
   }  
</script>
{{!-- //XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX --}}

<script>
/* ===============================
   ROTINA 1: Variáveis globais
   Armazena os dados carregados do servidor e controle de estado
================================ */
let listaDepartamentos = [];

let jaCarregouDepartamentos = false;
let contador = 1; // controla a quantidade de departamentos adicionados
//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

================================ */
const maxDepartamentos = 10;
//const seleciXonados = [];



</script>


